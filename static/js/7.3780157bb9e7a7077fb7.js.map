{"version":3,"sources":["webpack:///static/js/7.3780157bb9e7a7077fb7.js","webpack:///./src/components/service/service.vue","webpack:///m-title.vue?2f38***","webpack:///./src/base/m-title/m-title.vue?9331****","webpack:///./src/base/m-title/m-title.vue?4efc****","webpack:///./src/base/m-title/m-title.vue?3eaa****","webpack:///./src/base/m-title/m-title.vue?ec48****","webpack:///./~/._babel-runtime@6.23.0@babel-runtime/core-js/object/keys.js?98f4","webpack:///./~/._core-js@2.4.1@core-js/library/fn/object/keys.js?a986","webpack:///./~/._core-js@2.4.1@core-js/library/modules/_object-sap.js?fdf5","webpack:///./~/._core-js@2.4.1@core-js/library/modules/es6.object.keys.js?4b37","webpack:///./src/api/service.js","webpack:///service.vue","webpack:///./src/components/service/service.vue?be27","webpack:///./src/components/service/service.vue?4879","webpack:///./~/._showdown@1.7.1@showdown/dist/showdown.js","webpack:///./src/components/service/service.vue?dceb"],"names":["webpackJsonp","446","module","exports","__webpack_require__","injectStyle","ssrContext","Component","449","__webpack_exports__","Object","defineProperty","value","props","titleName","type","String","default","noRouter","Boolean","methods","back","this","$emit","$router","450","push","i","version","sources","names","mappings","file","sourcesContent","sourceRoot","451","content","locals","452","453","render","_vm","_h","$createElement","_c","_self","staticClass","on","click","_v","_s","staticRenderFns","509","__esModule","522","keys","523","$export","core","fails","KEY","exec","fn","exp","S","F","524","toObject","$keys","it","550","getQuestion","__WEBPACK_IMPORTED_MODULE_1_axios___default","a","get","url","then","res","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default","resolve","data","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__","n","__WEBPACK_IMPORTED_MODULE_1_axios__","566","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default","__WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title__","__WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title___default","__WEBPACK_IMPORTED_MODULE_2_api_service__","__WEBPACK_IMPORTED_MODULE_3_showdown__","__WEBPACK_IMPORTED_MODULE_3_showdown___default","targetName","questionName","hotQuestiones","showFlag","questionDetail","created","_getQuestion","_this","response","normalize","obj","ret","list","forEach","caption","index","indexOf","tag","substring","question","detail","showDetial","item","converter","Converter","makeHtml","goback","components","MTitle","590","610","615","__WEBPACK_AMD_DEFINE_RESULT__","getDefaultOpts","simple","defaultOptions","omitExtraWLInCodeBlocks","defaultValue","describe","noHeaderId","prefixHeaderId","ghCompatibleHeaderId","headerLevelStart","parseImgDimensions","simplifiedAutoLink","excludeTrailingPunctuationFromURLs","literalMidWordUnderscores","literalMidWordAsterisks","strikethrough","tables","tablesHeaderId","ghCodeBlocks","tasklists","smoothLivePreview","smartIndentationFix","description","disableForced4SpacesIndentedSublists","simpleLineBreaks","requireSpaceBeforeHeadingText","ghMentions","ghMentionsLink","encodeEmails","openLinksInNewWindow","JSON","parse","stringify","opt","hasOwnProperty","validate","extension","name","errMsg","valid","error","showdown","helper","isArray","length","baseMsg","ext","isString","toLowerCase","isUndefined","listeners","filter","regex","ln","RegExp","replace","escapeCharactersCallback","wholeMatch","m1","charCodeAt","parsers","extensions","globalOptions","setFlavor","flavor","github","original","ghost","vanilla","allOn","options","setOption","key","getOption","getOptions","resetOptions","Error","preset","option","getFlavor","getFlavorOptions","getDefaultOptions","subParser","func","stdExtName","validExtension","getAllExtensions","removeExtension","resetExtensions","validateExtension","console","warn","isFunction","getType","toString","call","constructor","Array","callback","prop","s","escapeCharacters","text","charsToEscape","afterBackslash","regexString","rgxFindMatchPos","str","left","right","flags","t","m","start","end","f","g","x","l","pos","test","lastIndex","match","matchRecursiveRegExp","matchPos","results","slice","replaceRecursiveRegExp","replacement","repStr","finalStr","lng","bits","join","regexIndexOf","fromIndex","search","splitAtIndex","encodeEmailAddress","mail","encode","ch","Math","floor","random","r","msg","alert","log","regexes","asteriskAndDash","converterOptions","_parseExtension","legacyExtensionLoading","validExt","langExtensions","outputModifiers","listen","rTrimInputText","rsp","rgx","setConvFlavor","gOpt","_dispatch","evtName","globals","ei","nText","gHtmlBlocks","gHtmlMdBlocks","gHtmlSpans","gUrls","gTitles","gDimensions","gListLevel","hashLinkCounts","addExtension","useExtension","extensionName","splice","language","output","writeAnchorTag","linkText","linkId","m5","m6","title","result","wm","st","escape","mentions","username","simpleURLRegex","simpleURLRegex2","delimUrlRegex","simpleMailRegex","delimMailRegex","replaceLink","link","m2","m3","trailingPunctuation","lnkTxt","append","target","replaceMail","b","href","bq","pre","pattern","codeblock","nextChar","c","leadingText","numSpaces","repFunc","blockText","blockTags","txt","opTagPos","rgx1","patLeft","patRight","subTexts","newSubText1","concat","hashHTMLSpan","html","repText","limit","num","$1","headerId","customizedHeaderId","ghHeaderId","isNaN","parseInt","setextRegexH1","setextRegexH2","spanGamut","hID","hLevel","hashBlock","matchFound","atxStyle","hText","span","header","writeImageTag","altText","width","height","gDims","inlineRegExp","crazyRegExp","referenceRegExp","refShortcutRegExp","parseInside","trim","processListItems","listStr","trimTrailing","isParagraphed","m4","taskbtn","checked","bulletStyle","otp","wm2","parseConsecutiveLists","listType","olRgx","ulRgx","counterRxg","parseCL","grafs","split","grafsOut","grafsOutIt","codeFlag","delim","$2","re","blankLines","parseStyles","sLine","parseHeaders","style","id","tableHeaderId","parseCells","cell","buildTable","headers","cells","tb","tblLgn","ii","tableRgx","rawTable","tableLines","rawHeaders","map","rawStyles","rawCells","styles","shift","row","charCodeToReplace","fromCharCode","undefined","638","attrs","directives","rawName","expression","title-name","no-router","_l","$event","domProps","innerHTML"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCHjC,QAAAC,GAAAC,GACAF,EAAA,KAEA,GAAAG,GAAAH,EAAA,IAEAA,EAAA,KAEAA,EAAA,KAEAC,EAEA,KAEA,KAGAH,GAAAC,QAAAI,EAAAJ,SDUMK,IACA,SAAUN,EAAQO,EAAqBL,GAE7C,YACAM,QAAOC,eAAeF,EAAqB,cAAgBG,OAAO,IEtBlEH,EAAA,SF0BCI,OACCC,WACCC,KExBHC,OFyBGC,QEvBH,IFyBEC,UACCH,KExBHI,QFyBGF,SEtBH,IFyBCG,SACCC,KAAM,WACL,GAAIC,KAAKJ,SEtBZ,WFuBII,MAAKC,MExBT,SF2BGD,MAAKE,QExBRH,WF+BMI,IACA,SAAUvB,EAAQC,EAASC,GG1DjCD,EAAAD,EAAAC,QAAAC,EAAA,SAKAD,EAAAuB,MAAAxB,EAAAyB,EAAA,+UAAsW,IAAQC,QAAA,EAAAC,SAAA,wDAAAC,SAAAC,SAAA,2MAAAC,KAAA,cAAAC,gBAAA,+aAAmwBC,WAAA,OHmE3mCC,IACA,SAAUjC,EAAQC,EAASC,GItEjC,GAAAgC,GAAAhC,EAAA,IACA,iBAAAgC,SAAAlC,EAAAyB,EAAAS,EAAA,MACAA,EAAAC,SAAAnC,EAAAC,QAAAiC,EAAAC,OAEAjC,GAAA,gBAAAgC,GAAA,IJ+EME,IACA,SAAUpC,EAAQC,EAASC,GKvFjC,QAAAC,GAAAC,GACAF,EAAA,KAEA,GAAAG,GAAAH,EAAA,IAEAA,EAAA,KAEAA,EAAA,KAEAC,EAEA,kBAEA,KAGAH,GAAAC,QAAAI,EAAAJ,SL8FMoC,IACA,SAAUrC,EAAQC,GM/GxBD,EAAAC,SAAgBqC,OAAA,WAAmB,GAAAC,GAAAnB,KAAaoB,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAC1E,OAAAE,GAAA,OACAE,YAAA,UACGF,EAAA,KACHE,YAAA,kBACAC,IACAC,MAAAP,EAAApB,QAEGoB,EAAAQ,GAAA,KAAAL,EAAA,MACHE,YAAA,SACGL,EAAAQ,GAAAR,EAAAS,GAAAT,EAAA3B,iBACFqC,qBNqHKC,IACA,SAAUlD,EAAQC,EAASC,GOjIjCF,EAAAC,SAAkBc,QAAAb,EAAA,KAAAiD,YAAA,IPuIZC,IACA,SAAUpD,EAAQC,EAASC,GQxIjCA,EAAA,KACAF,EAAAC,QAAAC,EAAA,IAAAM,OAAA6C,MR8IMC,IACA,SAAUtD,EAAQC,EAASC,GS/IjC,GAAAqD,GAAArD,EAAA,IACAsD,EAAAtD,EAAA,IACAuD,EAAAvD,EAAA,GACAF,GAAAC,QAAA,SAAAyD,EAAAC,GACA,GAAAC,IAAAJ,EAAAhD,YAA8BkD,IAAAlD,OAAAkD,GAC9BG,IACAA,GAAAH,GAAAC,EAAAC,GACAL,IAAAO,EAAAP,EAAAQ,EAAAN,EAAA,WAAmDG,EAAA,KAAS,SAAAC,KTuJtDG,IACA,SAAUhE,EAAQC,EAASC,GU/JjC,GAAA+D,GAAA/D,EAAA,KACAgE,EAAAhE,EAAA,IAEAA,GAAA,uBACA,gBAAAiE,GACA,MAAAD,GAAAD,EAAAE,QVwKMC,IACA,SAAUpE,EAAQO,EAAqBL,GAE7C,YW/KO,SAASmE,KAGf,MAAOC,GAAAC,EAAMC,IAFPC,+DAEgBC,KAAK,SAACC,GAC3B,MAAOC,GAAAL,EAAQM,QAAQF,EAAIG,QX4KIvE,EAAuB,EAAI8D,CACvC,IAAIU,GAA8D7E,EAAoB,KAClF0E,EAAsE1E,EAAoB8E,EAAED,GAC5FE,EAAsC/E,EAAoB,KAC1DoE,EAA8CpE,EAAoB8E,EAAEC,IAcvFC,IACA,SAAUlF,EAAQO,EAAqBL,GAE7C,YACAM,QAAOC,eAAeF,EAAqB,cAAgBG,OAAO,GAC7C,IAAIyE,GAAkEjF,EAAoB,KACtFkF,EAA0ElF,EAAoB8E,EAAEG,GAChGE,EAAqDnF,EAAoB,KACzEoF,EAA6DpF,EAAoB8E,EAAEK,GACnFE,EAA4CrF,EAAoB,KAChEsF,EAAyCtF,EAAoB,KAC7DuF,EAAiDvF,EAAoB8E,EAAEQ,EAQnEjF,GAA6B,SACzDuE,KAAM,WACL,OACCY,WY1KH,OZ2KGC,aY1KH,GZ2KGC,iBACAC,UY1KH,EZ2KGC,eYzKH,OZ4KCC,QAAS,WACR3E,KY1KF4E,gBZ6KC9E,SACC8E,aAAc,WY3KhB,GAAAC,GAAA7E,IZ8KGlB,GAAoBuB,EAAE8D,EAA+D,KAAKb,KAAK,SAAUwB,GACxGD,EAAML,cAAgBK,EAAME,UY7KhCD,MZgLEC,UAAW,SAAmBC,GAC7B,GAAIC,MACAC,EAAOlB,IY7KdgB,EZyLG,OAXAE,GAAKC,QAAQ,SAAUC,EAASC,IACK,IAAhCD,EAAQE,QAAQ,aACiB,IAAhCN,EAAII,GAASE,QAAQ,OACxBL,EAAI7E,MACHmF,IAAK,cAAgBH,EAAQI,UAAU,EAAGJ,EAAQE,QY7KzD,YZ8KOG,SAAUT,EY7KjBI,GZ8KOM,OAAQV,EAAIE,EAAKG,EY5KxB,QAIAJ,GZ+KEU,WAAY,SAAoBC,GAC/B5F,KAAKyE,UY7KR,EZ8KGzE,KAAKuE,aAAeqB,EY7KvBH,QZ8KG,IAAII,GAAY,GAAIxB,GAA+ClB,EY7KtE2C,SZ8KG9F,MAAK0E,eAAiBmB,EAAUE,SAASH,EY7K5CF,SZ+KEM,OAAQ,WACHhG,KAAKyE,UACRzE,KAAKyE,UY7KT,EZ8KIzE,KAAKE,QAAQE,KY7KjB,aZ+KIJ,KAAKE,QAAQE,KY7KjB,cZiLC6F,YY3KDC,OAAAhC,EAAAf,KZkLMgD,IACA,SAAUvH,EAAQC,EAASC,GapRjCD,EAAAD,EAAAC,QAAAC,EAAA,SAKAD,EAAAuB,MAAAxB,EAAAyB,EAAA,g2EAA63E,IAAQC,QAAA,EAAAC,SAAA,8DAAAC,SAAAC,SAAA,yvCAAAC,KAAA,cAAAC,gBAAA,u9FAAq2IC,WAAA,Ob6RpuNwF,IACA,SAAUxH,EAAQC,EAASC,GchSjC,GAAAgC,GAAAhC,EAAA,IACA,iBAAAgC,SAAAlC,EAAAyB,EAAAS,EAAA,MACAA,EAAAC,SAAAnC,EAAAC,QAAAiC,EAAAC,OAEAjC,GAAA,gBAAAgC,GAAA,IdySMuF,IACA,SAAUzH,EAAQC,EAASC,GejTjC,GAAAwH;CACA,WAKA,QAAAC,GAAAC,GACA,YAEA,IAAAC,IACAC,yBACAC,cAAA,EACAC,SAAA,wDACAnH,KAAA,WAEAoH,YACAF,cAAA,EACAC,SAAA,kCACAnH,KAAA,WAEAqH,gBACAH,cAAA,EACAC,SAAA,2CACAnH,KAAA,UAEAsH,sBACAJ,cAAA,EACAC,SAAA,oIACAnH,KAAA,WAEAuH,kBACAL,cAAA,EACAC,SAAA,gCACAnH,KAAA,WAEAwH,oBACAN,cAAA,EACAC,SAAA,sCACAnH,KAAA,WAEAyH,oBACAP,cAAA,EACAC,SAAA,iCACAnH,KAAA,WAEA0H,oCACAR,cAAA,EACAC,SAAA,sEACAnH,KAAA,WAEA2H,2BACAT,cAAA,EACAC,SAAA,mDACAnH,KAAA,WAEA4H,yBACAV,cAAA,EACAC,SAAA,+CACAnH,KAAA,WAEA6H,eACAX,cAAA,EACAC,SAAA,oCACAnH,KAAA,WAEA8H,QACAZ,cAAA,EACAC,SAAA,6BACAnH,KAAA,WAEA+H,gBACAb,cAAA,EACAC,SAAA,6BACAnH,KAAA,WAEAgI,cACAd,cAAA,EACAC,SAAA,6CACAnH,KAAA,WAEAiI,WACAf,cAAA,EACAC,SAAA,mCACAnH,KAAA,WAEAkI,mBACAhB,cAAA,EACAC,SAAA,kEACAnH,KAAA,WAEAmI,qBACAjB,cAAA,EACAkB,YAAA,kDACApI,KAAA,WAEAqI,sCACAnB,cAAA,EACAkB,YAAA,oEACApI,KAAA,WAEAsI,kBACApB,cAAA,EACAkB,YAAA,gDACApI,KAAA,WAEAuI,+BACArB,cAAA,EACAkB,YAAA,6EACApI,KAAA,WAEAwI,YACAtB,cAAA,EACAkB,YAAA,2BACApI,KAAA,WAEAyI,gBACAvB,aAAA,yBACAkB,YAAA,yFACApI,KAAA,UAEA0I,cACAxB,cAAA,EACAkB,YAAA,0IACApI,KAAA,WAEA2I,sBACAzB,cAAA,EACAkB,YAAA,gCACApI,KAAA,WAGA,SAAA+G,EACA,MAAA6B,MAAAC,MAAAD,KAAAE,UAAA9B,GAEA,IAAAxB,KACA,QAAAuD,KAAA/B,GACAA,EAAAgC,eAAAD,KACAvD,EAAAuD,GAAA/B,EAAA+B,GAAA7B,aAGA,OAAA1B,GAmRA,QAAAyD,GAAAC,EAAAC,GACA,YAEA,IAAAC,GAAA,cAAAD,EAAA,4CACA3D,GACA6D,OAAA,EACAC,MAAA,GAGAC,GAAAC,OAAAC,QAAAP,KACAA,MAGA,QAAAtI,GAAA,EAAiBA,EAAAsI,EAAAQ,SAAsB9I,EAAA,CACvC,GAAA+I,GAAAP,EAAA,kBAAAxI,EAAA,KACAgJ,EAAAV,EAAAtI,EACA,oBAAAgJ,GAGA,MAFApE,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,gCAAAC,GAAA,SACApE,CAGA,KAAA+D,EAAAC,OAAAK,SAAAD,EAAA5J,MAGA,MAFAwF,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,+CAAAC,GAAA5J,KAAA,SACAwF,CAGA,IAAAxF,GAAA4J,EAAA5J,KAAA4J,EAAA5J,KAAA8J,aAWA,IARA,aAAA9J,IACAA,EAAA4J,EAAA5J,KAAA,QAGA,SAAAA,IACAA,EAAA4J,EAAA5J,KAAA,UAGA,SAAAA,GAAA,WAAAA,GAAA,aAAAA,EAGA,MAFAwF,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,QAAA3J,EAAA,iFACAwF,CAGA,iBAAAxF,GACA,GAAAuJ,EAAAC,OAAAO,YAAAH,EAAAI,WAGA,MAFAxE,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,0EACAnE,MAGA,IAAA+D,EAAAC,OAAAO,YAAAH,EAAAK,SAAAV,EAAAC,OAAAO,YAAAH,EAAAM,OAGA,MAFA1E,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA3J,EAAA,yEACAwF,CAIA,IAAAoE,EAAAI,UAAA,CACA,mBAAAJ,GAAAI,UAGA,MAFAxE,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,oDAAAC,GAAAI,UAAA,SACAxE,CAEA,QAAA2E,KAAAP,GAAAI,UACA,GAAAJ,EAAAI,UAAAhB,eAAAmB,IACA,kBAAAP,GAAAI,UAAAG,GAIA,MAHA3E,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,+EAAAQ,EACA,iCAAAP,GAAAI,UAAAG,GAAA,SACA3E,EAMA,GAAAoE,EAAAK,QACA,qBAAAL,GAAAK,OAGA,MAFAzE,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,0CAAAC,GAAAK,OAAA,SACAzE,MAEK,IAAAoE,EAAAM,MAAA,CAIL,GAHAX,EAAAC,OAAAK,SAAAD,EAAAM,SACAN,EAAAM,MAAA,GAAAE,QAAAR,EAAAM,MAAA,QAEAN,EAAAM,gBAAAE,SAGA,MAFA5E,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,0EAAAC,GAAAM,MAAA,SACA1E,CAEA,IAAA+D,EAAAC,OAAAO,YAAAH,EAAAS,SAGA,MAFA7E,GAAA6D,OAAA,EACA7D,EAAA8D,MAAAK,EAAA,iEACAnE,GAIA,MAAAA,GA0HA,QAAA8E,GAAAC,EAAAC,GACA,YAEA,YADAA,EAAAC,WAAA,GACA,IA/dA,GAAAlB,MACAmB,KACAC,KACAC,EAAA9D,GAAA,GACA+D,EAAA,UACAC,GACAC,QACA9D,yBAAA,EACAQ,oBAAA,EACAC,oCAAA,EACAC,2BAAA,EACAE,eAAA,EACAC,QAAA,EACAC,gBAAA,EACAC,cAAA,EACAC,WAAA,EACAI,sCAAA,EACAC,kBAAA,EACAC,+BAAA,EACAjB,sBAAA,EACAkB,YAAA,GAEAwC,UACA5D,YAAA,EACAY,cAAA,GAEAiD,OACAhE,yBAAA,EACAO,oBAAA,EACAC,oBAAA,EACAC,oCAAA,EACAC,2BAAA,EACAE,eAAA,EACAC,QAAA,EACAC,gBAAA,EACAC,cAAA,EACAC,WAAA,EACAC,mBAAA,EACAI,kBAAA,EACAC,+BAAA,EACAC,YAAA,EACAE,cAAA,GAEAwC,QAAApE,GAAA,GACAqE,MA7DA,WACA,YACA,IAAAC,GAAAtE,GAAA,GACAtB,IACA,QAAAuD,KAAAqC,GACAA,EAAApC,eAAAD,KACAvD,EAAAuD,IAAA,EAGA,OAAAvD,MA2DA+D,GAAAC,UAMAD,EAAAoB,cASApB,EAAA8B,UAAA,SAAAC,EAAAzL,GACA,YAEA,OADA+K,GAAAU,GAAAzL,EACAU,MASAgJ,EAAAgC,UAAA,SAAAD,GACA,YACA,OAAAV,GAAAU,IAQA/B,EAAAiC,WAAA,WACA,YACA,OAAAZ,IAOArB,EAAAkC,aAAA,WACA,YACAb,GAAA9D,GAAA,IAOAyC,EAAAsB,UAAA,SAAA1B,GACA,YACA,KAAA2B,EAAA9B,eAAAG,GACA,KAAAuC,OAAAvC,EAAA,wBAEAI,GAAAkC,cACA,IAAAE,GAAAb,EAAA3B,EACA0B,GAAA1B,CACA,QAAAyC,KAAAD,GACAA,EAAA3C,eAAA4C,KACAhB,EAAAgB,GAAAD,EAAAC,KASArC,EAAAsC,UAAA,WACA,YACA,OAAAhB,IAQAtB,EAAAuC,iBAAA,SAAA3C,GACA,YACA,IAAA2B,EAAA9B,eAAAG,GACA,MAAA2B,GAAA3B,IAUAI,EAAAwC,kBAAA,SAAAhF,GACA,YACA,OAAAD,GAAAC,IAaAwC,EAAAyC,UAAA,SAAA7C,EAAA8C,GACA,YACA,IAAA1C,EAAAC,OAAAK,SAAAV,GAAA,CACA,YAAA8C,EAEK,CACL,GAAAvB,EAAA1B,eAAAG,GACA,MAAAuB,GAAAvB,EAEA,MAAAuC,OAAA,mBAAAvC,EAAA,oBALAuB,EAAAvB,GAAA8C,IAkBA1C,EAAAL,UAAA,SAAAC,EAAAS,GACA,YAEA,KAAAL,EAAAC,OAAAK,SAAAV,GACA,KAAAuC,OAAA,oCAMA,IAHAvC,EAAAI,EAAAC,OAAA0C,WAAA/C,GAGAI,EAAAC,OAAAO,YAAAH,GAAA,CACA,IAAAe,EAAA3B,eAAAG,GACA,KAAAuC,OAAA,mBAAAvC,EAAA,sBAEA,OAAAwB,GAAAxB,GAKA,kBAAAS,KACAA,OAIAL,EAAAC,OAAAC,QAAAG,KACAA,MAGA,IAAAuC,GAAAlD,EAAAW,EAAAT,EAEA,KAAAgD,EAAA9C,MAGA,KAAAqC,OAAAS,EAAA7C,MAFAqB,GAAAxB,GAAAS,GAWAL,EAAA6C,iBAAA,WACA,YACA,OAAAzB,IAOApB,EAAA8C,gBAAA,SAAAlD,GACA,mBACAwB,GAAAxB,IAMAI,EAAA+C,gBAAA,WACA,YACA3B,OAoHApB,EAAAgD,kBAAA,SAAA3C,GACA,YAEA,IAAA2C,GAAAtD,EAAAW,EAAA,KACA,SAAA2C,EAAAlD,QACAmD,QAAAC,KAAAF,EAAAjD,QACA,IASAC,EAAAP,eAAA,YACAO,EAAAC,WASAD,EAAAC,OAAAK,SAAA,SAAAnG,GACA,YACA,uBAAAA,gBAAAzD,SASAsJ,EAAAC,OAAAkD,WAAA,SAAAhJ,GACA,YACA,IAAAiJ,KACA,OAAAjJ,IAAA,sBAAAiJ,EAAAC,SAAAC,KAAAnJ,IASA6F,EAAAC,OAAAC,QAAA,SAAA/F,GACA,YACA,OAAAA,GAAAoJ,cAAAC,OASAxD,EAAAC,OAAAO,YAAA,SAAAlK,GACA,YACA,iBAAAA,GAUA0J,EAAAC,OAAA9D,QAAA,SAAAH,EAAAyH,GACA,YAEA,IAAAzD,EAAAC,OAAAO,YAAAxE,GACA,SAAAmG,OAAA,wBAGA,IAAAnC,EAAAC,OAAAO,YAAAiD,GACA,SAAAtB,OAAA,6BAGA,KAAAnC,EAAAC,OAAAkD,WAAAM,GACA,SAAAtB,OAAA,4CAGA,sBAAAnG,GAAAG,QACAH,EAAAG,QAAAsH,OACG,IAAAzD,EAAAC,OAAAC,QAAAlE,GACH,OAAA3E,GAAA,EAAmBA,EAAA2E,EAAAmE,OAAgB9I,IACnCoM,EAAAzH,EAAA3E,KAAA2E,OAEG,uBAOH,SAAAmG,OAAA,yDANA,QAAAuB,KAAA1H,GACAA,EAAAyD,eAAAiE,IACAD,EAAAzH,EAAA0H,KAAA1H,KAcAgE,EAAAC,OAAA0C,WAAA,SAAAgB,GACA,YACA,OAAAA,GAAA7C,QAAA,qBAAAA,QAAA,UAAAP,eAgBAP,EAAAC,OAAAc,2BAUAf,EAAAC,OAAA2D,iBAAA,SAAAC,EAAAC,EAAAC,GACA,YAGA,IAAAC,GAAA,KAAAF,EAAAhD,QAAA,0BAEAiD,KACAC,EAAA,OAAAA,EAGA,IAAArD,GAAA,GAAAE,QAAAmD,EAAA,IAGA,OAFAH,KAAA/C,QAAAH,EAAAI,GAKA,IAAAkD,GAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACA,YACA,IAKAC,GAAAX,EAAAY,EAAAC,EAAAC,EALAC,EAAAL,GAAA,GACAM,EAAAD,EAAApI,QAAA,QACAsI,EAAA,GAAA/D,QAAAsD,EAAA,IAAAC,EAAA,IAAAM,EAAA5D,QAAA,UACA+D,EAAA,GAAAhE,QAAAsD,EAAAO,EAAA5D,QAAA,UACAgE,IAGA,IAEA,IADAR,EAAA,EACAC,EAAAK,EAAArL,KAAA2K,IACA,GAAAW,EAAAE,KAAAR,EAAA,IACAD,MACAX,EAAAiB,EAAAI,UACAR,EAAAb,EAAAY,EAAA,GAAApE,YAEO,IAAAmE,MACPA,EAAA,CACAG,EAAAF,EAAAlI,MAAAkI,EAAA,GAAApE,MACA,IAAAnE,IACAmI,MAAmBK,QAAAC,IAAAd,GACnBsB,OAAoBT,MAAAb,EAAAc,IAAAF,EAAAlI,OACpB+H,OAAoBI,MAAAD,EAAAlI,MAAAoI,OACpBzD,YAAyBwD,QAAAC,OAGzB,IADAK,EAAA1N,KAAA4E,IACA2I,EACA,MAAAG,UAKGR,IAAAM,EAAAI,UAAArB,GAEH,OAAAmB,GAgCA9E,GAAAC,OAAAiF,qBAAA,SAAAhB,EAAAC,EAAAC,EAAAC,GACA,YAKA,QAHAc,GAAAlB,EAAAC,EAAAC,EAAAC,EAAAC,GACAe,KAEA/N,EAAA,EAAiBA,EAAA8N,EAAAhF,SAAqB9I,EACtC+N,EAAAhO,MACA8M,EAAAmB,MAAAF,EAAA9N,GAAA2J,WAAAwD,MAAAW,EAAA9N,GAAA2J,WAAAyD,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA4N,MAAAT,MAAAW,EAAA9N,GAAA4N,MAAAR,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA8M,KAAAK,MAAAW,EAAA9N,GAAA8M,KAAAM,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA+M,MAAAI,MAAAW,EAAA9N,GAAA+M,MAAAK,MAGA,OAAAW,IAYApF,EAAAC,OAAAqF,uBAAA,SAAApB,EAAAqB,EAAApB,EAAAC,EAAAC,GACA,YAEA,KAAArE,EAAAC,OAAAkD,WAAAoC,GAAA,CACA,GAAAC,GAAAD,CACAA,GAAA,WACA,MAAAC,IAIA,GAAAL,GAAAlB,EAAAC,EAAAC,EAAAC,EAAAC,GACAoB,EAAAvB,EACAwB,EAAAP,EAAAhF,MAEA,IAAAuF,EAAA,GACA,GAAAC,KACA,KAAAR,EAAA,GAAAnE,WAAAwD,OACAmB,EAAAvO,KAAA8M,EAAAmB,MAAA,EAAAF,EAAA,GAAAnE,WAAAwD,OAEA,QAAAnN,GAAA,EAAmBA,EAAAqO,IAASrO,EAC5BsO,EAAAvO,KACAmO,EACArB,EAAAmB,MAAAF,EAAA9N,GAAA2J,WAAAwD,MAAAW,EAAA9N,GAAA2J,WAAAyD,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA4N,MAAAT,MAAAW,EAAA9N,GAAA4N,MAAAR,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA8M,KAAAK,MAAAW,EAAA9N,GAAA8M,KAAAM,KACAP,EAAAmB,MAAAF,EAAA9N,GAAA+M,MAAAI,MAAAW,EAAA9N,GAAA+M,MAAAK,OAGApN,EAAAqO,EAAA,GACAC,EAAAvO,KAAA8M,EAAAmB,MAAAF,EAAA9N,GAAA2J,WAAAyD,IAAAU,EAAA9N,EAAA,GAAA2J,WAAAwD,OAGAW,GAAAO,EAAA,GAAA1E,WAAAyD,IAAAP,EAAA/D,QACAwF,EAAAvO,KAAA8M,EAAAmB,MAAAF,EAAAO,EAAA,GAAA1E,WAAAyD,MAEAgB,EAAAE,EAAAC,KAAA,IAEA,MAAAH,IAaAzF,EAAAC,OAAA4F,aAAA,SAAA3B,EAAAvD,EAAAmF,GACA,YACA,KAAA9F,EAAAC,OAAAK,SAAA4D,GACA,sGAEA,IAAAvD,YAAAE,UAAA,EACA,oHAEA,IAAAvE,GAAA4H,EAAA1H,UAAAsJ,GAAA,GAAAC,OAAApF,EACA,OAAArE,IAAA,EAAAA,GAAAwJ,GAAA,GAAAxJ,GAUA0D,EAAAC,OAAA+F,aAAA,SAAA9B,EAAA7H,GACA,YACA,KAAA2D,EAAAC,OAAAK,SAAA4D,GACA,sGAEA,QAAAA,EAAA1H,UAAA,EAAAH,GAAA6H,EAAA1H,UAAAH,KAYA2D,EAAAC,OAAAgG,mBAAA,SAAAC,GACA,YACA,IAAAC,IACA,SAAAC,GACA,WAAAA,EAAAlF,WAAA,QAEA,SAAAkF,GACA,YAAAA,EAAAlF,WAAA,GAAAmC,SAAA,SAEA,SAAA+C,GACA,MAAAA,IAkBA,OAdAF,KAAApF,QAAA,cAAAsF,GACA,SAAAA,EAEAA,EAAAD,EAAAE,KAAAC,MAAA,EAAAD,KAAAE,WAAAH,OACK,CACL,GAAAI,GAAAH,KAAAE,QAEAH,GACAI,EAAA,GAAAL,EAAA,GAAAC,GAAAI,EAAA,IAAAL,EAAA,GAAAC,GAAAD,EAAA,GAAAC,GAGA,MAAAA,MAUA,8BACAnD,SACAC,KAAA,SAAAuD,GACA,YACAC,OAAAD,IAEAE,IAAA,SAAAF,GACA,YACAC,OAAAD,IAEA1G,MAAA,SAAA0G,GACA,YACA,MAAAA,MASAzG,EAAAC,OAAA2G,SACAC,gBAAA,WAaA7G,EAAAlD,UAAA,SAAAgK,GACA,YA0EA,SAAAC,GAAA1G,EAAAT,GAIA,GAFAA,KAAA,KAEAI,EAAAC,OAAAK,SAAAD,GAAA,CAKA,GAJAA,EAAAL,EAAAC,OAAA0C,WAAAtC,GACAT,EAAAS,EAGAL,EAAAoB,WAAAf,GAIA,MAHA4C,SAAAC,KAAA,wBAAA7C,EAAA,oIAEA2G,GAAAhH,EAAAoB,WAAAf,KAIO,IAAAL,EAAAC,OAAAO,YAAAY,EAAAf,IAIP,KAAA8B,OAAA,cAAA9B,EAAA,8EAHAA,GAAAe,EAAAf,GAOA,kBAAAA,KACAA,OAGAL,EAAAC,OAAAC,QAAAG,KACAA,MAGA,IAAA4G,GAAAvH,EAAAW,EAAAT,EACA,KAAAqH,EAAAnH,MACA,KAAAqC,OAAA8E,EAAAlH,MAGA,QAAA1I,GAAA,EAAmBA,EAAAgJ,EAAAF,SAAgB9I,EAAA,CACnC,OAAAgJ,EAAAhJ,GAAAZ,MAEA,WACAyQ,EAAA9P,KAAAiJ,EAAAhJ,GACA,MAEA,cACA8P,EAAA/P,KAAAiJ,EAAAhJ,IAGA,GAAAgJ,EAAAhJ,GAAAoI,eAAA,aACA,OAAAmB,KAAAP,GAAAhJ,GAAAoJ,UACAJ,EAAAhJ,GAAAoJ,UAAAhB,eAAAmB,IACAwG,EAAAxG,EAAAP,EAAAhJ,GAAAoJ,UAAAG,KAaA,QAAAoG,GAAA3G,EAAAT,GACA,kBAAAS,KACAA,IAAA,GAAAL,GAAAlD,YAEAkD,EAAAC,OAAAC,QAAAG,KACAA,MAEA,IAAAP,GAAAJ,EAAAW,EAAAT,EAEA,KAAAE,QACA,KAAAqC,OAAArC,EAAAC,MAGA,QAAA1I,GAAA,EAAmBA,EAAAgJ,EAAAF,SAAgB9I,EACnC,OAAAgJ,EAAAhJ,GAAAZ,MACA,WACAyQ,EAAA9P,KAAAiJ,EAAAhJ,GACA,MACA,cACA8P,EAAA/P,KAAAiJ,EAAAhJ,GACA,MACA,SACA,KAAA8K,OAAA,iDAUA,QAAAiF,GAAAxH,EAAA6D,GACA,IAAAzD,EAAAC,OAAAK,SAAAV,GACA,KAAAuC,OAAA,mFAAAvC,GAAA,SAGA,sBAAA6D,GACA,KAAAtB,OAAA,yFAAAsB,GAAA,SAGAhD,GAAAhB,eAAAG,KACAa,EAAAb,OAEAa,EAAAb,GAAAxI,KAAAqM,GAGA,QAAA4D,GAAAxD,GACA,GAAAyD,GAAAzD,EAAAoB,MAAA,WAAA9E,OACAoH,EAAA,GAAA1G,QAAA,UAA+ByG,EAAA,IAAc,KAC7C,OAAAzD,GAAA/C,QAAAyG,EAAA,IA1LA,GAMA1F,MAOAqF,KAOAC,KAOA1G,KAKA+G,EAAAlG,GAQA,WACAwF,OAEA,QAAAW,KAAApG,GACAA,EAAA5B,eAAAgI,KACA5F,EAAA4F,GAAApG,EAAAoG,GAKA,oBAAAX,GAOA,KAAA3E,OAAA,qEAAA2E,GACA,uBAPA,QAAAtH,KAAAsH,GACAA,EAAArH,eAAAD,KACAqC,EAAArC,GAAAsH,EAAAtH,GAQAqC,GAAAT,YACApB,EAAAC,OAAA9D,QAAA0F,EAAAT,WAAA2F,MAwIA/P,KAAA0Q,UAAA,SAAAC,EAAA9D,EAAAhC,EAAA+F,GACA,GAAAnH,EAAAhB,eAAAkI,GACA,OAAAE,GAAA,EAAsBA,EAAApH,EAAAkH,GAAAxH,SAAgC0H,EAAA,CACtD,GAAAC,GAAArH,EAAAkH,GAAAE,GAAAF,EAAA9D,EAAA7M,KAAA6K,EAAA+F,EACAE,QAAA,KAAAA,IACAjE,EAAAiE,GAIA,MAAAjE,IASA7M,KAAAoQ,OAAA,SAAAxH,EAAA6D,GAEA,MADA2D,GAAAxH,EAAA6D,GACAzM,MAQAA,KAAA+F,SAAA,SAAA8G,GAEA,IAAAA,EACA,MAAAA,EAGA,IAAA+D,IACAG,eACAC,iBACAC,cACAC,SACAC,WACAC,eACAC,WAAA,EACAC,kBACApB,iBACAC,kBACAtK,UAAA7F,KACAyH,gBAgEA,OA1DAoF,KAAA/C,QAAA,WAKA+C,IAAA/C,QAAA,YAGA+C,IAAA/C,QAAA,cACA+C,IAAA/C,QAAA,YAGA+C,IAAA/C,QAAA,eAEAe,EAAAjD,sBACAiF,EAAAwD,EAAAxD,IAIAA,EAAA,OAAAA,EAAA,OAGAA,EAAA7D,EAAAyC,UAAA,SAAAoB,EAAAhC,EAAA+F,GAQA/D,IAAA/C,QAAA,iBAGAd,EAAAC,OAAA9D,QAAA+K,EAAA,SAAA7G,GACAwD,EAAA7D,EAAAyC,UAAA,gBAAApC,EAAAwD,EAAAhC,EAAA+F,KAIA/D,EAAA7D,EAAAyC,UAAA,mBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,oBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,gBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,wBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,cAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,mBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,wBAAAoB,EAAAhC,EAAA+F,GAGA/D,IAAA/C,QAAA,YAGA+C,IAAA/C,QAAA,WAGAd,EAAAC,OAAA9D,QAAAgL,EAAA,SAAA9G,GACAwD,EAAA7D,EAAAyC,UAAA,gBAAApC,EAAAwD,EAAAhC,EAAA+F,KAGA/D,GAQA7M,KAAA8K,UAAA,SAAAC,EAAAzL,GACAuL,EAAAE,GAAAzL,GAQAU,KAAAgL,UAAA,SAAAD,GACA,MAAAF,GAAAE,IAOA/K,KAAAiL,WAAA,WACA,MAAAJ,IAQA7K,KAAAuR,aAAA,SAAA5I,EAAAC,GACAA,KAAA,KACAmH,EAAApH,EAAAC,IAOA5I,KAAAwR,aAAA,SAAAC,GACA1B,EAAA0B,IAOAzR,KAAAsK,UAAA,SAAA1B,GACA,IAAA2B,EAAA9B,eAAAG,GACA,KAAAuC,OAAAvC,EAAA,wBAEA,IAAAwC,GAAAb,EAAA3B,EACA4H,GAAA5H,CACA,QAAAyC,KAAAD,GACAA,EAAA3C,eAAA4C,KACAR,EAAAQ,GAAAD,EAAAC,KASArL,KAAAsL,UAAA,WACA,MAAAkF,IASAxQ,KAAA8L,gBAAA,SAAAnD,GACAK,EAAAC,OAAAC,QAAAP,KACAA,MAEA,QAAAxF,GAAA,EAAmBA,EAAAwF,EAAAQ,SAAsBhG,EAAA,CAEzC,OADAkG,GAAAV,EAAAxF,GACA9C,EAAA,EAAqBA,EAAA6P,EAAA/G,SAA2B9I,EAChD6P,EAAA7P,KAAAgJ,GACA6G,EAAA7P,GAAAqR,OAAArR,EAAA,EAGA,QAAsB8P,EAAAhH,SAA6B9I,EACnD8P,EADA,KACA9G,GACA8G,EAFA,GAEAuB,OAAArR,EAAA,KAUAL,KAAA6L,iBAAA,WACA,OACA8F,SAAAzB,EACA0B,OAAAzB,KAQAnH,EAAAyC,UAAA,mBAAAoB,EAAAhC,EAAA+F,GACA,YAEA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,iBAAA7D,EAAAhC,EAAA+F,EAEA,IAAAiB,GAAA,SAAA7H,EAAA8H,EAAAC,EAAA1O,EAAA2O,EAAAC,EAAAC,GAOA,GANAlJ,EAAAC,OAAAO,YAAA0I,KACAA,EAAA,IAEAH,IAAAxI,cAGAS,EAAA+E,OAAA,mCACA1L,EAAA,OACK,KAAAA,EAAA,CAOL,GANA0O,IAEAA,EAAAD,EAAAvI,cAAAO,QAAA,cAEAzG,EAAA,IAAA0O,EAEA/I,EAAAC,OAAAO,YAAAoH,EAAAM,MAAAa,IAMA,MAAA/H,EALA3G,GAAAuN,EAAAM,MAAAa,GACA/I,EAAAC,OAAAO,YAAAoH,EAAAO,QAAAY,MACAG,EAAAtB,EAAAO,QAAAY,IAQA1O,IAAAyG,QAAAd,EAAAC,OAAA2G,QAAAC,gBAAA7G,EAAAC,OAAAc,yBAEA,IAAAoI,GAAA,YAAA9O,EAAA,GAgBA,OAdA,KAAA6O,GAAA,OAAAA,IACAA,IAAApI,QAAA,eAEAoI,IAAApI,QAAAd,EAAAC,OAAA2G,QAAAC,gBAAA7G,EAAAC,OAAAc,0BACAoI,GAAA,WAAAD,EAAA,KAGArH,EAAAzC,uBAEA+J,GAAA,wBAGAA,GAAA,IAAAL,EAAA,OAuCA,OAjCAjF,KAAA/C,QAAA,0DAAA+H,GAIAhF,IAAA/C,QAAA,6FACA+H,GAGAhF,IAAA/C,QAAA,qHACA+H,GAKAhF,IAAA/C,QAAA,2BAAA+H,GAGAhH,EAAA5C,aACA4E,IAAA/C,QAAA,qDAA2D,SAAAsI,EAAAC,EAAAC,EAAAC,EAAAC,GAC3D,UAAAF,EACA,MAAAD,GAAAE,CAIA,KAAAvJ,EAAAC,OAAAK,SAAAuB,EAAA3C,gBACA,SAAAiD,OAAA,yCAGA,OAAAkH,GAAA,YADAxH,EAAA3C,eAAA4B,QAAA,QAAoD0I,GACpD,KAAAD,EAAA,UAIA1F,EAAA+D,EAAA/K,UAAA6K,UAAA,gBAAA7D,EAAAhC,EAAA+F,IAMA,IAAA6B,GAAA,8EACAC,EAAA,4FAEAC,EAAA,kDACAC,EAAA,qGACAC,EAAA,gEAEAC,EAAA,SAAAjI,GACA,YAEA,iBAAAuH,EAAAW,EAAAC,EAAAC,EAAAC,GACA,GAAAC,GAAAJ,EACAK,EAAA,GACAC,EAAA,EAUA,OATA,UAAAtF,KAAAgF,KACAA,IAAAjJ,QAAA,0BAEAe,EAAA1D,oCAAA+L,IACAE,EAAAF,GAEArI,EAAAzC,uBACAiL,EAAA,wBAEA,YAAAN,EAAA,IAAAM,EAAA,IAAAF,EAAA,OAAAC,IAIAE,EAAA,SAAAzI,EAAA+F,GACA,YACA,iBAAA5G,EAAAuJ,EAAArE,GACA,GAAAsE,GAAA,SASA,OARAD,MAAA,GACArE,EAAAlG,EAAAyC,UAAA,wBAAAyD,EAAArE,EAAA+F,GACA/F,EAAA1C,cACAqL,EAAAxK,EAAAC,OAAAgG,mBAAAuE,EAAAtE,GACAA,EAAAlG,EAAAC,OAAAgG,mBAAAC,IAEAsE,GAAAtE,EAEAqE,EAAA,YAAAC,EAAA,KAAAtE,EAAA,QAIAlG,GAAAyC,UAAA,qBAAAoB,EAAAhC,EAAA+F,GACA,YASA,OAPA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,GAEA/D,IAAA/C,QAAA6I,EAAAG,EAAAjI,IACAgC,IAAA/C,QAAA+I,EAAAS,EAAAzI,EAAA+F,IAEA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,kBAAA7D,EAAAhC,EAAA+F,KAKA5H,EAAAyC,UAAA,+BAAAoB,EAAAhC,EAAA+F,GACA,YAEA,OAAA/F,GAAA3D,oBAIA2F,EAAA+D,EAAA/K,UAAA6K,UAAA,6BAAA7D,EAAAhC,EAAA+F,GAGA/D,EADAhC,EAAA1D,mCACA0F,EAAA/C,QAAA4I,EAAAI,EAAAjI,IAEAgC,EAAA/C,QAAA2I,EAAAK,EAAAjI,IAEAgC,IAAA/C,QAAA8I,EAAAU,EAAAzI,EAAA+F,IAEA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,4BAAA7D,EAAAhC,EAAA+F,IAZA/D,IAqBA7D,EAAAyC,UAAA,sBAAAoB,EAAAhC,EAAA+F,GACA,YAyBA,OAvBA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,oBAAA7D,EAAAhC,EAAA+F,GAIA/D,EAAA7D,EAAAyC,UAAA,eAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,WAAAoB,EAAAhC,EAAA+F,GAGA/D,EAAA7D,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GAEA/D,EAAA7D,EAAAyC,UAAA,SAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,cAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,UAAAoB,EAAAhC,EAAA+F,GAMA/D,EAAA7D,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,cAAAoB,EAAAhC,EAAA+F,GAEA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,KAKA5H,EAAAyC,UAAA,uBAAAoB,EAAAhC,EAAA+F,GACA,YAgCA,OA9BA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,qBAAA7D,EAAAhC,EAAA+F,GAEA/D,IAAA/C,QAAA,sCAAgC,SAAAE,EAAAC,GAChC,GAAAwJ,GAAAxJ,CAuBA,OAnBAwJ,KAAA3J,QAAA,yBAGA2J,IAAA3J,QAAA,UAEA2J,IAAA3J,QAAA,iBACA2J,EAAAzK,EAAAyC,UAAA,oBAAAgI,EAAA5I,EAAA+F,GACA6C,EAAAzK,EAAAyC,UAAA,cAAAgI,EAAA5I,EAAA+F,GAEA6C,IAAA3J,QAAA,kBAEA2J,IAAA3J,QAAA,sCAAAE,EAAAC,GACA,GAAAyJ,GAAAzJ,CAIA,OAFAyJ,KAAA5J,QAAA,cACA4J,IAAA5J,QAAA,YAIAd,EAAAyC,UAAA,8BAAAgI,EAAA,kBAAA5I,EAAA+F,KAGA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,oBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,sBAAAoB,EAAAhC,EAAA+F,GACA,YAEA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,oBAAA7D,EAAAhC,EAAA+F,GAGA/D,GAAA,IAEA,IAAA8G,GAAA,kEAyBA,OAxBA9G,KAAA/C,QAAA6J,EAAA,SAAA3J,EAAAC,EAAA+I,GACA,GAAAY,GAAA3J,EACA4J,EAAAb,EACAvF,EAAA,IAcA,OAZAmG,GAAA5K,EAAAyC,UAAA,WAAAmI,EAAA/I,EAAA+F,GACAgD,EAAA5K,EAAAyC,UAAA,cAAAmI,EAAA/I,EAAA+F,GACAgD,EAAA5K,EAAAyC,UAAA,SAAAmI,EAAA/I,EAAA+F,GACAgD,IAAA9J,QAAA,YACA8J,IAAA9J,QAAA,YAEAe,EAAAnE,0BACA+G,EAAA,IAGAmG,EAAA,cAAAA,EAAAnG,EAAA,gBAEAzE,EAAAyC,UAAA,aAAAmI,EAAA/I,EAAA+F,GAAAiD,IAIAhH,IAAA/C,QAAA,SAEA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,KA6BA5H,EAAAyC,UAAA,qBAAAoB,EAAAhC,EAAA+F,GACA,YAkBA,OAhBA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,OAEA,SACA/D,EAAA,IAEAA,IAAA/C,QAAA,sCACA,SAAAE,EAAAC,EAAA+I,EAAAC,GACA,GAAAa,GAAAb,CAIA,OAHAa,KAAAhK,QAAA,iBACAgK,IAAAhK,QAAA,eACAgK,EAAA9K,EAAAyC,UAAA,cAAAqI,EAAAjJ,EAAA+F,GACA3G,EAAA,SAAA6J,EAAA,YAIAjH,EAAA+D,EAAA/K,UAAA6K,UAAA,kBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,iBAAAoB,EAAAhC,EAAA+F,GACA,YA2BA,OA1BA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,eAAA7D,EAAAhC,EAAA+F,GAGA/D,IAAA/C,QAAA,oBAGA+C,IAAA/C,QAAA,cAGA+C,IAAA/C,QAAA,sBAAAE,EAAAC,GAKA,OAJA8J,GAAA9J,EACA+J,EAAA,EAAAD,EAAA5K,OAAA,EAGA9I,EAAA,EAAmBA,EAAA2T,EAAe3T,IAClC0T,GAAA,GAGA,OAAAA,KAIAlH,IAAA/C,QAAA,cACA+C,IAAA/C,QAAA,UAEA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,cAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,+BAAAoB,EAAAhC,EAAA+F,GACA,YAiBA,OAhBA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,6BAAA7D,EAAAhC,EAAA+F,GAIA/D,IAAA/C,QAAA,qCAAuD,SAGvD+C,IAAA/C,QAAA,4BAGA+C,IAAA/C,QAAA,aAGA+C,IAAA/C,QAAA,aAEA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,4BAAA7D,EAAAhC,EAAA+F,KAeA5H,EAAAyC,UAAA,kCAAAoB,EAAAhC,EAAA+F,GACA,YAOA,OANA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,gCAAA7D,EAAAhC,EAAA+F,GAEA/D,IAAA/C,QAAA,UAAAd,EAAAC,OAAAc,0BACA8C,IAAA/C,QAAA,8BAAgCd,EAAAC,OAAAc,0BAEhC8C,EAAA+D,EAAA/K,UAAA6K,UAAA,+BAAA7D,EAAAhC,EAAA+F,KASA5H,EAAAyC,UAAA,sBAAAoB,EAAAhC,EAAA+F,GACA,YAeA,OAbA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,oBAAA7D,EAAAhC,EAAA+F,GAIA/D,IACA/C,QAAA,cAEAA,QAAA,aACAA,QAAA,aAEAA,QAAA,qBAAoBd,EAAAC,OAAAc,0BAEpB8C,EAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,KAQA5H,EAAAyC,UAAA,iDAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,+CAAA7D,EAAAhC,EAAA+F,EAIA,IAAAjH,GAAA,2DASA,OAPAkD,KAAA/C,QAAAH,EAAA,SAAAK,GACA,MAAAA,GACAF,QAAA,4BACAA,QAAA,gBAAAd,EAAAC,OAAAc,4BAGA8C,EAAA+D,EAAA/K,UAAA6K,UAAA,8CAAA7D,EAAAhC,EAAA+F,KAcA5H,EAAAyC,UAAA,4BAAAoB,EAAAhC,EAAA+F,GACA,YAGA,OAAA/F,GAAApD,cAIAoF,EAAA+D,EAAA/K,UAAA6K,UAAA,0BAAA7D,EAAAhC,EAAA+F,GAEA/D,GAAA,KAEAA,IAAA/C,QAAA,6CAAAE,EAAA2H,EAAAiC,GACA,GAAAnG,GAAA5C,EAAA,+BAeA,OAZA+I,GAAA5K,EAAAyC,UAAA,cAAAmI,EAAA/I,EAAA+F,GACAgD,EAAA5K,EAAAyC,UAAA,SAAAmI,EAAA/I,EAAA+F,GACAgD,IAAA9J,QAAA,YACA8J,IAAA9J,QAAA,YAEA8J,EAAA,cAAAjC,EAAA,WAAAA,EAAA,aAAAA,EAAA,YAAAiC,EAAAnG,EAAA,gBAEAmG,EAAA5K,EAAAyC,UAAA,aAAAmI,EAAA/I,EAAA+F,GAKA,UAAAA,EAAAnJ,aAAArH,MAAkDyM,KAAA7C,EAAA4J,cAAuC,aAIzF/G,IAAA/C,QAAA,SAEA8G,EAAA/K,UAAA6K,UAAA,yBAAA7D,EAAAhC,EAAA+F,IA7BA/D,IAgCA7D,EAAAyC,UAAA,qBAAAoB,EAAAhC,EAAA+F,GACA,YAKA,OAJA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,GACA/D,IAAA/C,QAAA,mBACA+C,EAAA,UAAA+D,EAAAG,YAAA3Q,KAAAyM,GAAA,WACAA,EAAA+D,EAAA/K,UAAA6K,UAAA,kBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,wBAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,sBAAA7D,EAAAhC,EAAA+F,EAEA,IAAAqD,GAAA,SAAAjK,EAAAiE,EAAAd,EAAAC,GACA,GAAAwG,GAAAzG,EAAAnE,EAAAyC,UAAA,cAAAwC,EAAApD,EAAA+F,GAAAxD,CACA,aAAAwD,EAAAK,WAAA7Q,KAAAwT,GAAA,OAOA,OAHA/G,GAAA7D,EAAAC,OAAAqF,uBAAAzB,EAAAoH,EAAA,kCAEApH,EAAA+D,EAAA/K,UAAA6K,UAAA,qBAAA7D,EAAAhC,EAAA+F,KAIA5H,EAAAyC,UAAA,uBAAAoB,EAAAhC,EAAA+F,GACA,YAEA,iBAAA5G,EAAAC,GACA,GAAAiK,GAAAjK,CAYA,OATAiK,KAAApK,QAAA,cACAoK,IAAApK,QAAA,UAGAoK,IAAApK,QAAA,YAGAoK,EAAA,UAAAtD,EAAAG,YAAA3Q,KAAA8T,GAAA,cAMAlL,EAAAyC,UAAA,0BAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,wBAAA7D,EAAAhC,EAAA+F,EAgDA,QA9CAuD,IACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,aACA,QACA,KACA,KACA,KACA,SACA,WACA,OACA,WACA,SACA,OACA,QACA,UACA,SACA,SACA,MACA,UACA,QACA,UACA,QACA,SACA,SACA,SACA,SACA,QACA,KAEAF,EAAA,SAAAjK,EAAAiE,EAAAd,EAAAC,GACA,GAAAgH,GAAApK,CAMA,QAHA,IAAAmD,EAAA4B,OAAA,kBACAqF,EAAAjH,EAAAyD,EAAA/K,UAAAE,SAAAkI,GAAAb,GAEA,UAAAwD,EAAAG,YAAA3Q,KAAAgU,GAAA,YAGA/T,EAAA,EAAiBA,EAAA8T,EAAAhL,SAAsB9I,EAOvC,IALA,GAAAgU,GACAC,EAAA,GAAAzK,QAAA,WAAsCsK,EAAA9T,GAAA,kBACtCkU,EAAA,IAAAJ,EAAA9T,GAAA,YACAmU,EAAA,KAAAL,EAAA9T,GAAA,KAEA,KAAAgU,EAAArL,EAAAC,OAAA4F,aAAAhC,EAAAyH,KAAA,CAEA,GAAAG,GAAAzL,EAAAC,OAAA+F,aAAAnC,EAAAwH,GAEAK,EAAA1L,EAAAC,OAAAqF,uBAAAmG,EAAA,GAAAR,EAAAM,EAAAC,EAAA,KAGA,IAAAE,IAAAD,EAAA,GACA,KAEA5H,GAAA4H,EAAA,GAAAE,OAAAD,GAiBA,MAbA7H,KAAA/C,QAAA,oDACAd,EAAAyC,UAAA,eAAAoB,EAAAhC,EAAA+F,IAGA/D,EAAA7D,EAAAC,OAAAqF,uBAAAzB,EAAA,SAAAuH,GACA,gBAAAxD,EAAAG,YAAA3Q,KAAAgU,GAAA,YACG,iBAAU,eAGbvH,IAAA/C,QAAA,yDACAd,EAAAyC,UAAA,eAAAoB,EAAAhC,EAAA+F,IAEA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,uBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,yBAAAoB,EAAAhC,EAAA+F,GACA,YAGA,SAAAgE,GAAAC,GACA,YAAAjE,EAAAK,WAAA7Q,KAAAyU,GAAA,OA0BA,MA7BAhI,GAAA+D,EAAA/K,UAAA6K,UAAA,uBAAA7D,EAAAhC,EAAA+F,GAOA/D,IAAA/C,QAAA,wBAAAsI,GACA,MAAAwC,GAAAxC,KAIAvF,IAAA/C,QAAA,qCAAAsI,GACA,MAAAwC,GAAAxC,KAIAvF,IAAA/C,QAAA,6CAAAsI,GACA,MAAAwC,GAAAxC,KAIAvF,IAAA/C,QAAA,sBAAAsI,GACA,MAAAwC,GAAAxC,KAKAvF,EAAA+D,EAAA/K,UAAA6K,UAAA,sBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,2BAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,yBAAA7D,EAAAhC,EAAA+F,EAEA,QAAAvQ,GAAA,EAAiBA,EAAAuQ,EAAAK,WAAA9H,SAA+B9I,EAAA,CAKhD,IAJA,GAAAyU,GAAAlE,EAAAK,WAAA5Q,GAEA0U,EAAA,EAEA,WAAAhH,KAAA+G,IAAA,CACA,GAAAE,GAAAnL,OAAAoL,EAEA,IADAH,IAAAhL,QAAA,KAAAkL,EAAA,IAAApE,EAAAK,WAAA+D,IACA,KAAAD,EACA,QAEAA,EAEAlI,IAAA/C,QAAA,KAAAzJ,EAAA,IAAAyU,GAIA,MADAjI,GAAA+D,EAAA/K,UAAA6K,UAAA,wBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,2BAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,yBAAA7D,EAAAhC,EAAA+F,EAEA,IAAAqD,GAAA,SAAAjK,EAAAiE,EAAAd,EAAAC,GAEA,GAAAwG,GAAAzG,EAAAnE,EAAAyC,UAAA,cAAAwC,EAAApD,EAAA+F,GAAAxD,CACA,iBAAAwD,EAAAnJ,aAAArH,MAAkDyM,KAAA7C,EAAA4J,cAAuC,WAOzF,OAHA/G,GAAA7D,EAAAC,OAAAqF,uBAAAzB,EAAAoH,EAAA,yCAAuE,2BAA0C,OAEjHpH,EAAA+D,EAAA/K,UAAA6K,UAAA,wBAAA7D,EAAAhC,EAAA+F,KAIA5H,EAAAyC,UAAA,mBAAAoB,EAAAhC,EAAA+F,GACA,YAyDA,SAAAsE,GAAA3H,GACA,GAAA2E,EAGA,IAAArH,EAAAsK,mBAAA,CACA,GAAAlH,GAAAV,EAAAU,MAAA,kBACAA,MAAA,KACAV,EAAAU,EAAA,IAmCA,MA7BAiE,GADAlJ,EAAAC,OAAAK,SAAAuB,EAAA/D,gBACA+D,EAAA/D,eAAAyG,GACK,IAAA1C,EAAA/D,eACL,WAAAyG,EAEAA,EAIA2E,EADAkD,EACAlD,EACApI,QAAA,UAEAA,QAAA,SAAuB,IACvBA,QAAA,UACAA,QAAA,UAGAA,QAAA,yCAAkC,IAClCP,cAEA2I,EACApI,QAAA,aACAP,cAGAqH,EAAAU,eAAAY,GACAA,IAAA,IAAAtB,EAAAU,eAAAY,KAEAtB,EAAAU,eAAAY,GAAA,EAEAA,EAjGArF,EAAA+D,EAAA/K,UAAA6K,UAAA,iBAAA7D,EAAAhC,EAAA+F,EAEA,IAAA5J,GAAAqO,MAAAC,SAAAzK,EAAA7D,mBAAA,EAAAsO,SAAAzK,EAAA7D,kBACAoO,EAAAvK,EAAA9D,qBASAwO,EAAA1K,EAAA,kDAAuE,6BACvE2K,EAAA3K,EAAA,kDAAuE,4BAEvEgC,KAAA/C,QAAAyL,EAAA,SAAAvL,EAAAC,GAEA,GAAAwL,GAAAzM,EAAAyC,UAAA,aAAAxB,EAAAY,EAAA+F,GACA8E,EAAA7K,EAAA,sBAAAqK,EAAAjL,GAAA,IACA0L,EAAA3O,EACA4O,EAAA,KAAAD,EAAAD,EAAA,IAAAD,EAAA,MAAAE,EAAA,GACA,OAAA3M,GAAAyC,UAAA,aAAAmK,EAAA/K,EAAA+F,KAGA/D,IAAA/C,QAAA0L,EAAA,SAAAK,EAAA5L,GACA,GAAAwL,GAAAzM,EAAAyC,UAAA,aAAAxB,EAAAY,EAAA+F,GACA8E,EAAA7K,EAAA,sBAAAqK,EAAAjL,GAAA,IACA0L,EAAA3O,EAAA,EACA4O,EAAA,KAAAD,EAAAD,EAAA,IAAAD,EAAA,MAAAE,EAAA,GACA,OAAA3M,GAAAyC,UAAA,aAAAmK,EAAA/K,EAAA+F,IAUA,IAAAkF,GAAAjL,EAAA,kEAAoE,mCA8DpE,OA5DAgC,KAAA/C,QAAAgM,EAAA,SAAA9L,EAAAC,EAAA+I,GACA,GAAA+C,GAAA/C,CACAnI,GAAAsK,qBACAY,EAAA/C,EAAAlJ,QAAA,qBAAwC,IAGxC,IAAAkM,GAAAhN,EAAAyC,UAAA,aAAAsK,EAAAlL,EAAA+F,GACA8E,EAAA7K,EAAA,sBAAAqK,EAAAlC,GAAA,IACA2C,EAAA3O,EAAA,EAAAiD,EAAAd,OACA8M,EAAA,KAAAN,EAAAD,EAAA,IAAAM,EAAA,MAAAL,EAAA,GAEA,OAAA3M,GAAAyC,UAAA,aAAAwK,EAAApL,EAAA+F,KAgDA/D,EAAA+D,EAAA/K,UAAA6K,UAAA,gBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,0BAAAoB,EAAAhC,EAAA+F,GACA,YACA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,wBAAA7D,EAAAhC,EAAA+F,EAEA,IAAA7F,GAAA/B,EAAAyC,UAAA,sBAAAZ,EAAA+F,EAMA,OALA/D,KAAA/C,QAAA,4BAAuCiB,GACvC8B,IAAA/C,QAAA,6BAAwCiB,GACxC8B,IAAA/C,QAAA,4BAAuCiB,GAEvC8B,EAAA+D,EAAA/K,UAAA6K,UAAA,uBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GACA,YASA,SAAAsF,GAAAlM,EAAAmM,EAAApE,EAAA1O,EAAA+S,EAAAC,EAAArE,EAAAE,GAEA,GAAAhB,GAAAN,EAAAM,MACAC,EAAAP,EAAAO,QACAmF,EAAA1F,EAAAQ,WAQA,IANAW,IAAAxI,cAEA2I,IACAA,EAAA,IAGAlI,EAAA+E,OAAA,mCACA1L,EAAA,OAEK,SAAAA,GAAA,OAAAA,EAAA,CAOL,GANA,KAAA0O,GAAA,OAAAA,IAEAA,EAAAoE,EAAA5M,cAAAO,QAAA,cAEAzG,EAAA,IAAA0O,EAEA/I,EAAAC,OAAAO,YAAA0H,EAAAa,IAUA,MAAA/H,EATA3G,GAAA6N,EAAAa,GACA/I,EAAAC,OAAAO,YAAA2H,EAAAY,MACAG,EAAAf,EAAAY,IAEA/I,EAAAC,OAAAO,YAAA8M,EAAAvE,MACAqE,EAAAE,EAAAvE,GAAAqE,MACAC,EAAAC,EAAAvE,GAAAsE,QAOAF,IACArM,QAAA,eAEAA,QAAAd,EAAAC,OAAA2G,QAAAC,gBAAA7G,EAAAC,OAAAc,0BAEA1G,IAAAyG,QAAAd,EAAAC,OAAA2G,QAAAC,gBAAA7G,EAAAC,OAAAc,yBACA,IAAAoI,GAAA,aAAA9O,EAAA,UAAA8S,EAAA,GAoBA,OAlBAjE,KACAA,IACApI,QAAA,eAEAA,QAAAd,EAAAC,OAAA2G,QAAAC,gBAAA7G,EAAAC,OAAAc,0BACAoI,GAAA,WAAAD,EAAA,KAGAkE,GAAAC,IACAD,EAAA,MAAAA,EAAA,OAAAA,EACAC,EAAA,MAAAA,EAAA,OAAAA,EAEAlE,GAAA,WAAAiE,EAAA,IACAjE,GAAA,YAAAkE,EAAA,KAGAlE,GAAA,MAnEAtF,EAAA+D,EAAA/K,UAAA6K,UAAA,gBAAA7D,EAAAhC,EAAA+F,EAEA,IAAA2F,GAAA,yJACAC,EAAA,qIACAC,EAAA,8CACAC,EAAA,2BAiFA,OAbA7J,KAAA/C,QAAA2M,EAAAP,GAIArJ,IAAA/C,QAAA0M,EAAAN,GAGArJ,IAAA/C,QAAAyM,EAAAL,GAGArJ,IAAA/C,QAAA4M,EAAAR,GAEArJ,EAAA+D,EAAA/K,UAAA6K,UAAA,eAAA7D,EAAAhC,EAAA+F,KAIA5H,EAAAyC,UAAA,0BAAAoB,EAAAhC,EAAA+F,GACA,YAQA,SAAA+F,GAAAvC,EAAAjH,EAAAC,GAIA,MAHAvC,GAAA3D,qBACAkN,EAAApL,EAAAyC,UAAA,uBAAA2I,EAAAvJ,EAAA+F,IAEAzD,EAAAiH,EAAAhH,EAqDA,MA/DAP,GAAA+D,EAAA/K,UAAA6K,UAAA,wBAAA7D,EAAAhC,EAAA+F,GAcA/F,EAAAzD,2BACAyF,IAAA/C,QAAA,kCAAAsI,EAAAgC,GACA,MAAAuC,GAAAvC,EAAA,mCAEAvH,IAAA/C,QAAA,gCAAAsI,EAAAgC,GACA,MAAAuC,GAAAvC,EAAA,0BAEAvH,IAAA/C,QAAA,+BAAAsI,EAAAgC,GACA,MAAAuC,GAAAvC,EAAA,oBAGAvH,IAAA/C,QAAA,+BAAAsI,EAAA7E,GACA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,iCAAA6E,IAEAvF,IAAA/C,QAAA,6BAAAsI,EAAA7E,GACA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,wBAAA6E,IAEAvF,IAAA/C,QAAA,+BAAAsI,EAAA7E,GAEA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,gBAAA6E,KAKAvH,EAAAxD,yBACAwF,IAAA+J,OAAA9M,QAAA,0CAA8D,SAAAsI,EAAAgC,GAC9D,MAAAuC,GAAAvC,EAAA,qCAEAvH,IAAA+J,OAAA9M,QAAA,0CAA8D,SAAAsI,EAAAgC,GAC9D,MAAAuC,GAAAvC,EAAA,4BAEAvH,IAAA+J,OAAA9M,QAAA,0CAA8D,SAAAsI,EAAAgC,GAC9D,MAAAuC,GAAAvC,EAAA,uBAAAhC,EAAA/D,OAAA,gBAGAxB,IAAA/C,QAAA,qCAAAsI,EAAA7E,GACA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,iCAAA6E,IAEAvF,IAAA/C,QAAA,iCAAAsI,EAAA7E,GACA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,wBAAA6E,IAEAvF,IAAA/C,QAAA,iCAAAsI,EAAA7E,GAEA,YAAAQ,KAAAR,GAAAoJ,EAAApJ,EAAA,gBAAA6E,KAKAvF,EAAA+D,EAAA/K,UAAA6K,UAAA,uBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,iBAAAoB,EAAAhC,EAAA+F,GACA,YAUA,SAAAiG,GAAAC,EAAAC,GAqBAnG,EAAAS,aAGAyF,IAAAhN,QAAA,UAAqC,MAGrCgN,GAAA,IAEA,IAAAvG,GAAA,mHACAyG,EAAA,mBAAAjJ,KAAA+I,EAgFA,OA3EAjM,GAAA/C,uCACAyI,EAAA,gHAGAuG,IAAAhN,QAAAyG,EAAA,SAAAvG,EAAAC,EAAA+I,EAAAC,EAAAgE,EAAAC,EAAAC,GACAA,KAAA,KAAAA,EAAAP,MAEA,IAAAhR,GAAAoD,EAAAyC,UAAA,WAAAwL,EAAApM,EAAA+F,GACAwG,EAAA,EAuDA,OApDAF,IAAArM,EAAAnD,YACA0P,EAAA,yDACAxR,IAAAkE,QAAA,iCACA,GAAAuN,GAAA,mGAKA,OAJAF,KACAE,GAAA,YAEAA,GAAA,OAaAzR,IAAAkE,QAAA,wCAAAwN,GACA,WAAAA,IAMArN,GAAArE,EAAAmJ,OAAA,WAAoC,GACpCnJ,EAAAoD,EAAAyC,UAAA,oBAAA7F,EAAAiF,EAAA+F,GACAhL,EAAAoD,EAAAyC,UAAA,cAAA7F,EAAAiF,EAAA+F,KAGAhL,EAAAoD,EAAAyC,UAAA,SAAA7F,EAAAiF,EAAA+F,GACAhL,IAAAkE,QAAA,UACAlE,EAAAoD,EAAAyC,UAAA,kBAAA7F,EAAAiF,EAAA+F,GAEAhL,IAAAkE,QAAA,iBAEAlE,IAAAkE,QAAA,cAEAlE,EADAoR,EACAhO,EAAAyC,UAAA,cAAA7F,EAAAiF,EAAA+F,GAEA5H,EAAAyC,UAAA,aAAA7F,EAAAiF,EAAA+F,GAEAhL,IAAAkE,QAAA,eAIAlE,IAAAkE,QAAA,SAEAlE,EAAA,MAAAwR,EAAA,IAAAxR,EAAA,YAMAkR,IAAAhN,QAAA,UAEA8G,EAAAS,aAEA0F,IACAD,IAAAhN,QAAA,YAGAgN,EAUA,QAAAS,GAAArS,EAAAsS,EAAAT,GAGA,GAAAU,GAAA5M,EAAA,6EACA6M,EAAA7M,EAAA,6EACA8M,EAAA,OAAAH,EAAAC,EAAAC,EACAvF,EAAA,EAuBA,QArBA,IAAAjN,EAAA6J,OAAA4I,GACA,QAAAC,GAAAxD,GACA,GAAAtG,GAAAsG,EAAArF,OAAA4I,IACA,IAAA7J,GAEAqE,GAAA,MAAAqF,EAAA,MAAAX,EAAAzC,EAAA/F,MAAA,EAAAP,KAAAiJ,GAAA,KAAAS,EAAA,MAGAA,EAAA,OAAAA,EAAA,UACAG,EAAA,OAAAH,EAAAC,EAAAC,EAGAE,EAAAxD,EAAA/F,MAAAP,KAEAqE,GAAA,MAAAqF,EAAA,MAAAX,EAAAzC,IAAA2C,GAAA,KAAAS,EAAA,OAEOtS,GAEPiN,EAAA,MAAAqF,EAAA,MAAAX,EAAA3R,IAAA6R,GAAA,KAAAS,EAAA,MAGArF,EA0BA,MAxLAtF,GAAA+D,EAAA/K,UAAA6K,UAAA,eAAA7D,EAAAhC,EAAA+F,GAmKA/D,GAAA,KAGAA,EADA+D,EAAAS,WACAxE,EAAA/C,QAAA,4FACA,SAAAE,EAAA9E,EAAA8N,GAEA,MAAAuE,GAAArS,EADA8N,EAAAjE,OAAA,wBACA,KAIAlC,EAAA/C,QAAA,sGACA,SAAAE,EAAAC,EAAA/E,EAAA+N,GAEA,MAAAsE,GAAArS,EADA+N,EAAAlE,OAAA,wBACA,KAMAlC,IAAA/C,QAAA,SACA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,cAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,mBAAAoB,EAAAhC,EAAA+F,GACA,YAWA,OAVA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,iBAAA7D,EAAAhC,EAAA+F,GAIA/D,IAAA/C,QAAA,mBAAoC,MAGpC+C,IAAA/C,QAAA,UAEA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,gBAAA7D,EAAAhC,EAAA+F,KAOA5H,EAAAyC,UAAA,sBAAAoB,EAAAhC,EAAA+F,GACA,YAEA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,oBAAA7D,EAAAhC,EAAA+F,GAEA/D,IAAA/C,QAAA,YACA+C,IAAA/C,QAAA,WAMA,QAJA+N,GAAAhL,EAAAiL,MAAA,WACAC,KACAtK,EAAAoK,EAAA1O,OAEA9I,EAAA,EAAiBA,EAAAoN,EAASpN,IAAA,CAC1B,GAAA6M,GAAA2K,EAAAxX,EAEA6M,GAAA6B,OAAA,qBACAgJ,EAAA3X,KAAA8M,GAIKA,EAAA6B,OAAA,WACL7B,EAAAlE,EAAAyC,UAAA,aAAAyB,EAAArC,EAAA+F,GACA1D,IAAApD,QAAA,oBACAoD,GAAA,OACA6K,EAAA3X,KAAA8M,IAMA,IADAO,EAAAsK,EAAA5O,OACA9I,EAAA,EAAaA,EAAAoN,EAASpN,IAAA,CAMtB,IALA,GAAA6T,GAAA,GACA8D,EAAAD,EAAA1X,GACA4X,GAAA,EAGA,gBAAAlK,KAAAiK,IAAA,CACA,GAAAE,GAAArO,OAAAoL,GACAD,EAAAnL,OAAAsO,EAGAjE,GADA,MAAAgE,EACAtH,EAAAG,YAAAiE,GAGAiD,EAEAjP,EAAAyC,UAAA,cAAAmF,EAAAnJ,aAAAuN,GAAAnI,KAAAhC,EAAA+F,GAEAA,EAAAnJ,aAAAuN,GAAApB,UAGAM,IAAApK,QAAA,cAEAkO,IAAAlO,QAAA,4BAAAoK,GAEA,gCAAAnG,KAAAiK,KACAC,GAAA,GAGAF,EAAA1X,GAAA2X,EAMA,MAJAnL,GAAAkL,EAAAnJ,KAAA,MAEA/B,IAAA/C,QAAA,YACA+C,IAAA/C,QAAA,YACA8G,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,KAMA5H,EAAAyC,UAAA,wBAAApC,EAAAwD,EAAAhC,EAAA+F,GACA,YAEA,IAAAvH,EAAAK,OACAmD,EAAAxD,EAAAK,OAAAmD,EAAA+D,EAAA/K,UAAAgF,OAEG,IAAAxB,EAAAM,MAAA,CAEH,GAAAyO,GAAA/O,EAAAM,KACAyO,aAAAvO,UACAuO,EAAA,GAAAvO,QAAAuO,EAAA,MAEAvL,IAAA/C,QAAAsO,EAAA/O,EAAAS,SAGA,MAAA+C,KAOA7D,EAAAyC,UAAA,qBAAAoB,EAAAhC,EAAA+F,GACA,YAoCA,OAlCA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,mBAAA7D,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,aAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,yCAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,0BAAAoB,EAAAhC,EAAA+F,GAIA/D,EAAA7D,EAAAyC,UAAA,UAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,WAAAoB,EAAAhC,EAAA+F,GAKA/D,EAAA7D,EAAAyC,UAAA,aAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,iBAAAoB,EAAAhC,EAAA+F,GACA/D,EAAA7D,EAAAyC,UAAA,uBAAAoB,EAAAhC,EAAA+F,GAGA/D,EAAA7D,EAAAyC,UAAA,iBAAAoB,EAAAhC,EAAA+F,GAGA/D,EAAA7D,EAAAyC,UAAA,uBAAAoB,EAAAhC,EAAA+F,GAKA/D,EAFAhC,EAAA9C,iBAEA8E,EAAA/C,QAAA,kBAGA+C,EAAA/C,QAAA,qBAGA+C,EAAA+D,EAAA/K,UAAA6K,UAAA,kBAAA7D,EAAAhC,EAAA+F,KAIA5H,EAAAyC,UAAA,yBAAAoB,EAAAhC,EAAA+F,GACA,YAEA,SAAA+F,GAAAvC,GAIA,MAHAvJ,GAAA3D,qBACAkN,EAAApL,EAAAyC,UAAA,uBAAA2I,EAAAvJ,EAAA+F,IAEA,QAAAwD,EAAA,SASA,MANAvJ,GAAAvD,gBACAuF,EAAA+D,EAAA/K,UAAA6K,UAAA,uBAAA7D,EAAAhC,EAAA+F,GACA/D,IAAA/C,QAAA,8BAAmD,SAAAsI,EAAAgC,GAAwB,MAAAuC,GAAAvC,KAC3EvH,EAAA+D,EAAA/K,UAAA6K,UAAA,sBAAA7D,EAAAhC,EAAA+F,IAGA/D,IAQA7D,EAAAyC,UAAA,gCAAAoB,EAAAhC,EAAA+F,GACA,YAEA,IAAAjH,GAAA,iKAgCA,OA7BAkD,IAAA,KAEAA,IAAA/C,QAAAH,EAAA,SAAAK,EAAA+H,EAAA1O,EAAA+S,EAAAC,EAAAgC,EAAAnG,GAIA,MAHAH,KAAAxI,cACAqH,EAAAM,MAAAa,GAAA/I,EAAAyC,UAAA,uBAAApI,EAAAwH,EAAA+F,GAEAyH,EAGAA,EAAAnG,GAGAA,IACAtB,EAAAO,QAAAY,GAAAG,EAAApI,QAAA,kBAEAe,EAAA5D,oBAAAmP,GAAAC,IACAzF,EAAAQ,YAAAW,IACAqE,QACAC,WAKA,MAIAxJ,IAAA/C,QAAA,WAKAd,EAAAyC,UAAA,kBAAAoB,EAAAhC,EAAA+F,GACA,YAQA,SAAA0H,GAAAC,GACA,qBAAAxK,KAAAwK,GACA,4BACK,qBAAAxK,KAAAwK,GACL,6BACK,sBAAAxK,KAAAwK,GACL,8BAEA,GAIA,QAAAC,GAAAvC,EAAAwC,GACA,GAAAC,GAAA,EAOA,OANAzC,KAAAW,OACA/L,EAAA8N,gBACAD,EAAA,QAAAzC,EAAAnM,QAAA,UAAAP,cAAA,KAEA0M,EAAAjN,EAAAyC,UAAA,aAAAwK,EAAApL,EAAA+F,GAEA,MAAA8H,EAAAD,EAAA,IAAAxC,EAAA,UAGA,QAAA2C,GAAAC,EAAAJ,GAEA,YAAAA,EAAA,IADAzP,EAAAyC,UAAA,aAAAoN,EAAAhO,EAAA+F,GACA,UAGA,QAAAkI,GAAAC,EAAAC,GAIA,OAHAC,GAAA,2BACAC,EAAAH,EAAA5P,OAEA9I,EAAA,EAAmBA,EAAA6Y,IAAY7Y,EAC/B4Y,GAAAF,EAAA1Y,EAIA,KAFA4Y,GAAA,6BAEA5Y,EAAA,EAAeA,EAAA2Y,EAAA7P,SAAkB9I,EAAA,CACjC4Y,GAAA,QACA,QAAAE,GAAA,EAAsBA,EAAAD,IAAaC,EACnCF,GAAAD,EAAA3Y,GAAA8Y,EAEAF,IAAA,UAGA,MADAA,IAAA,uBAlDA,IAAApO,EAAAtD,OACA,MAAAsF,EAGA,IAAAuM,GAAA,wHA4HA,OA1EAvM,GAAA+D,EAAA/K,UAAA6K,UAAA,gBAAA7D,EAAAhC,EAAA+F,GAGA/D,IAAA/C,QAAA,UAAAd,EAAAC,OAAAc,0BAGA8C,IAAA/C,QAAAsP,EAAA,SAAAC,GAEA,GAAAhZ,GAAAiZ,EAAAD,EAAAvB,MAAA,KAGA,KAAAzX,EAAA,EAAeA,EAAAiZ,EAAAnQ,SAAuB9I,EACtC,YAAkB0N,KAAAuL,EAAAjZ,MAClBiZ,EAAAjZ,GAAAiZ,EAAAjZ,GAAAyJ,QAAA,YAAsD,KAEtD,YAAAiE,KAAAuL,EAAAjZ,MACAiZ,EAAAjZ,GAAAiZ,EAAAjZ,GAAAyJ,QAAA,gBAIA,IAAAyP,GAAAD,EAAA,GAAAxB,MAAA,KAAA0B,IAAA,SAAA7M,GAAgE,MAAAA,GAAAiK,SAChE6C,EAAAH,EAAA,GAAAxB,MAAA,KAAA0B,IAAA,SAAA7M,GAA+D,MAAAA,GAAAiK,SAC/D8C,KACAX,KACAY,KACAX,IAKA,KAHAM,EAAAM,QACAN,EAAAM,QAEAvZ,EAAA,EAAeA,EAAAiZ,EAAAnQ,SAAuB9I,EACtC,KAAAiZ,EAAAjZ,GAAAuW,QAGA8C,EAAAtZ,KACAkZ,EAAAjZ,GACAyX,MAAA,KACA0B,IAAA,SAAA7M,GACA,MAAAA,GAAAiK,SAKA,IAAA2C,EAAApQ,OAAAsQ,EAAAtQ,OACA,MAAAkQ,EAGA,KAAAhZ,EAAA,EAAeA,EAAAoZ,EAAAtQ,SAAsB9I,EACrCsZ,EAAAvZ,KAAAkY,EAAAmB,EAAApZ,IAGA,KAAAA,EAAA,EAAeA,EAAAkZ,EAAApQ,SAAuB9I,EACtC2I,EAAAC,OAAAO,YAAAmQ,EAAAtZ,MACAsZ,EAAAtZ,GAAA,IAEA0Y,EAAA3Y,KAAAoY,EAAAe,EAAAlZ,GAAAsZ,EAAAtZ,IAGA,KAAAA,EAAA,EAAeA,EAAAqZ,EAAAvQ,SAAqB9I,EAAA,CAEpC,OADAwZ,MACAV,EAAA,EAAsBA,EAAAJ,EAAA5P,SAAqBgQ,EAC3CnQ,EAAAC,OAAAO,YAAAkQ,EAAArZ,GAAA8Y,IAGAU,EAAAzZ,KAAAwY,EAAAc,EAAArZ,GAAA8Y,GAAAQ,EAAAR,IAEAH,GAAA5Y,KAAAyZ,GAGA,MAAAf,GAAAC,EAAAC,KAGAnM,EAAA+D,EAAA/K,UAAA6K,UAAA,eAAA7D,EAAAhC,EAAA+F,KAQA5H,EAAAyC,UAAA,gCAAAoB,EAAAhC,EAAA+F,GACA,YASA,OARA/D,GAAA+D,EAAA/K,UAAA6K,UAAA,8BAAA7D,EAAAhC,EAAA+F,GAEA/D,IAAA/C,QAAA,qBAAAE,EAAAC,GACA,GAAA6P,GAAAxE,SAAArL,EACA,OAAAvK,QAAAqa,aAAAD,KAGAjN,EAAA+D,EAAA/K,UAAA6K,UAAA,6BAAA7D,EAAAhC,EAAA+F,SAOA,KAAAhS,KAAAC,QACAD,EAAAC,QAAAmK,MAOGgR,MAHH1T,EAAA,WACA,YACA,OAAA0C,IACGsD,KAAAzN,EAAAC,EAAAD,EAAAD,QAAAC,QAAAyH,KAMFgG,KAAAtM,Of2TKia,IACA,SAAUrb,EAAQC,GgBzqGxBD,EAAAC,SAAgBqC,OAAA,WAAmB,GAAAC,GAAAnB,KAAaoB,EAAAD,EAAAE,eAA0BC,EAAAH,EAAAI,MAAAD,IAAAF,CAC1E,OAAAE,GAAA,OACAE,YAAA,YACGF,EAAA,cACH4Y,OACAtR,KAAA,yBAEGtH,EAAA,OACH6Y,aACAvR,KAAA,OACAwR,QAAA,SACA9a,OAAA6B,EAAAsD,SACA4V,WAAA,cAEA7Y,YAAA,kBACGF,EAAA,OACHE,YAAA,WACGF,EAAA,WACH4Y,OACAI,aAAAnZ,EAAAmD,WACAiW,aAAA,GAEA9Y,IACAuE,OAAA7E,EAAA6E,WAEG,GAAA7E,EAAAQ,GAAA,KAAAL,EAAA,OACHE,YAAA,8BACGF,EAAA,KACHE,YAAA,UACGF,EAAA,KACHE,YAAA,qBACGL,EAAAQ,GAAA,KAAAL,EAAA,KACHE,YAAA,SACGL,EAAAQ,GAAA,YAAAR,EAAAQ,GAAA,KAAAL,EAAA,KACHE,YAAA,UACGF,EAAA,KACHE,YAAA,wBACGL,EAAAQ,GAAA,KAAAL,EAAA,KACHE,YAAA,SACGL,EAAAQ,GAAA,cAAAR,EAAAQ,GAAA,KAAAL,EAAA,MACHE,YAAA,iBACGF,EAAA,MACHE,YAAA,qBACGL,EAAAQ,GAAA,UAAAR,EAAAQ,GAAA,KAAAR,EAAAqZ,GAAArZ,EAAA,uBAAAsE,GACH,MAAAnE,GAAA,MACAE,YAAA,sBACAC,IACAC,MAAA,SAAA+Y,GACAtZ,EAAAwE,WAAAF,OAGKnE,EAAA,KACL4Y,OACA1G,KAAA/N,EAAAF,OAEKpE,EAAAQ,GAAA,iBAAAR,EAAAS,GAAA6D,YAAA,kBAAAnE,EAAA,KACLE,YAAA,0CAEG,OAAAL,EAAAQ,GAAA,KAAAL,EAAA,cACH4Y,OACAtR,KAAA,kBAEGtH,EAAA,OACH6Y,aACAvR,KAAA,OACAwR,QAAA,SACA9a,MAAA6B,EAAA,SACAkZ,WAAA,aAEA7Y,YAAA,WACGF,EAAA,OACHE,YAAA,WACGF,EAAA,WACH4Y,OACAI,aAAAnZ,EAAAoD,aACAgW,aAAA,GAEA9Y,IACAuE,OAAA7E,EAAA6E,WAEG,GAAA7E,EAAAQ,GAAA,KAAAL,EAAA,OACHE,YAAA,WACAkZ,UACAC,UAAAxZ,EAAAS,GAAAT,EAAAuD,wBAEG,IACF7C","file":"static/js/7.3780157bb9e7a7077fb7.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 446:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(610)\n}\nvar Component = __webpack_require__(74)(\n  /* script */\n  __webpack_require__(566),\n  /* template */\n  __webpack_require__(638),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 449:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\tprops: {\n\t\ttitleName: {\n\t\t\ttype: String,\n\t\t\tdefault: ''\n\t\t},\n\t\tnoRouter: {\n\t\t\ttype: Boolean,\n\t\t\tdefault: false\n\t\t}\n\t},\n\tmethods: {\n\t\tback: function back() {\n\t\t\tif (this.noRouter) {\n\t\t\t\tthis.$emit('goback');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.$router.back();\n\t\t}\n\t}\n});\n\n/***/ }),\n\n/***/ 450:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(435)(true);\n// imports\n\n\n// module\nexports.push([module.i, \".title[data-v-e1fb876e]{width:100%;height:44px;z-index:999;text-align:center;background-image:linear-gradient(90deg,#0af,#0085ff);color:#fff}.title .icon-arrow_back[data-v-e1fb876e]{position:absolute;top:4px;left:0;padding:10px;font-size:16px}.title .name[data-v-e1fb876e]{width:100%;line-height:44px;font-size:18px;font-weight:700}\", \"\", {\"version\":3,\"sources\":[\"D:/Cixiu/Vue项目/vue-elem/src/base/m-title/m-title.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,WAAY,AACZ,YAAa,AACb,YAAa,AACb,kBAAmB,AACnB,qDAAwD,AACxD,UAAY,CACb,AACD,yCACE,kBAAmB,AACnB,QAAS,AACT,OAAQ,AACR,aAAc,AACd,cAAgB,CACjB,AACD,8BACE,WAAY,AACZ,iBAAkB,AAClB,eAAgB,AAChB,eAAiB,CAClB\",\"file\":\"m-title.vue\",\"sourcesContent\":[\"\\n.title[data-v-e1fb876e] {\\n  width: 100%;\\n  height: 44px;\\n  z-index: 999;\\n  text-align: center;\\n  background-image: linear-gradient(90deg, #0af, #0085ff);\\n  color: #fff;\\n}\\n.title .icon-arrow_back[data-v-e1fb876e] {\\n  position: absolute;\\n  top: 4px;\\n  left: 0;\\n  padding: 10px;\\n  font-size: 16px;\\n}\\n.title .name[data-v-e1fb876e] {\\n  width: 100%;\\n  line-height: 44px;\\n  font-size: 18px;\\n  font-weight: 700;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 451:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(450);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(436)(\"55b25fb2\", content, true);\n\n/***/ }),\n\n/***/ 452:\n/***/ (function(module, exports, __webpack_require__) {\n\nfunction injectStyle (ssrContext) {\n  __webpack_require__(451)\n}\nvar Component = __webpack_require__(74)(\n  /* script */\n  __webpack_require__(449),\n  /* template */\n  __webpack_require__(453),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-e1fb876e\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 453:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"title\"\n  }, [_c('i', {\n    staticClass: \"icon-arrow_back\",\n    on: {\n      \"click\": _vm.back\n    }\n  }), _vm._v(\" \"), _c('h1', {\n    staticClass: \"name\"\n  }, [_vm._v(_vm._s(_vm.titleName))])])\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 509:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(522), __esModule: true };\n\n/***/ }),\n\n/***/ 522:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(524);\nmodule.exports = __webpack_require__(34).Object.keys;\n\n/***/ }),\n\n/***/ 523:\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(57)\n  , core    = __webpack_require__(34)\n  , fails   = __webpack_require__(78);\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};\n\n/***/ }),\n\n/***/ 524:\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(117)\n  , $keys    = __webpack_require__(115);\n\n__webpack_require__(523)('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});\n\n/***/ }),\n\n/***/ 550:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony export (immutable) */ __webpack_exports__[\"a\"] = getQuestion;\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__(172);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios__ = __webpack_require__(171);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_axios___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_axios__);\n\n\n\nfunction getQuestion() {\n\tvar url = 'https://crayfish.elemecdn.com/m.ele.me@json/profile/explain';\n\n\treturn __WEBPACK_IMPORTED_MODULE_1_axios___default.a.get(url).then(function (res) {\n\t\treturn __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a.resolve(res.data);\n\t});\n}\n\n/***/ }),\n\n/***/ 566:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__ = __webpack_require__(509);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title__ = __webpack_require__(452);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_api_service__ = __webpack_require__(550);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_showdown__ = __webpack_require__(615);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_showdown___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_showdown__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n\tdata: function data() {\n\t\treturn {\n\t\t\ttargetName: '服务中心',\n\t\t\tquestionName: '',\n\t\t\thotQuestiones: [],\n\t\t\tshowFlag: false,\n\t\t\tquestionDetail: null\n\t\t};\n\t},\n\tcreated: function created() {\n\t\tthis._getQuestion();\n\t},\n\n\tmethods: {\n\t\t_getQuestion: function _getQuestion() {\n\t\t\tvar _this = this;\n\n\t\t\t__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2_api_service__[\"a\" /* getQuestion */])().then(function (response) {\n\t\t\t\t_this.hotQuestiones = _this.normalize(response);\n\t\t\t});\n\t\t},\n\t\tnormalize: function normalize(obj) {\n\t\t\tvar ret = [];\n\t\t\tvar list = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default()(obj);\n\t\t\tlist.forEach(function (caption, index) {\n\t\t\t\tif (caption.indexOf('Caption') !== -1) {\n\t\t\t\t\tif (obj[caption].indexOf('问题') !== -1) {\n\t\t\t\t\t\tret.push({\n\t\t\t\t\t\t\ttag: '#/service/#' + caption.substring(0, caption.indexOf('Caption')),\n\t\t\t\t\t\t\tquestion: obj[caption],\n\t\t\t\t\t\t\tdetail: obj[list[index + 1]]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn ret;\n\t\t},\n\t\tshowDetial: function showDetial(item) {\n\t\t\tthis.showFlag = true;\n\t\t\tthis.questionName = item.question;\n\t\t\tvar converter = new __WEBPACK_IMPORTED_MODULE_3_showdown___default.a.Converter();\n\t\t\tthis.questionDetail = converter.makeHtml(item.detail);\n\t\t},\n\t\tgoback: function goback() {\n\t\t\tif (this.showFlag) {\n\t\t\t\tthis.showFlag = false;\n\t\t\t\tthis.$router.push('/service');\n\t\t\t} else {\n\t\t\t\tthis.$router.push('/profile');\n\t\t\t}\n\t\t}\n\t},\n\tcomponents: {\n\t\tMTitle: __WEBPACK_IMPORTED_MODULE_1_base_m_title_m_title___default.a\n\t}\n});\n\n/***/ }),\n\n/***/ 590:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(435)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"body,html{background:#fff}.hotQuestiones{position:absolute;width:100%}.hotQuestiones.hotQuestiones-slide-enter,.hotQuestiones.hotQuestiones-slide-leave-active{-webkit-transform:translate3d(-20%,0,0);transform:translate3d(-20%,0,0)}.hotQuestiones.hotQuestiones-slide-enter-active,.hotQuestiones.hotQuestiones-slide-leave-active{transition:all .3s}.hotQuestiones .service-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;background-color:#fff;position:relative}.hotQuestiones .service-header:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-header .group{display:block;-webkit-box-flex:1;-ms-flex:1;flex:1;padding:19px 0 16px;line-height:14px;font-size:12px;color:#666}.hotQuestiones .service-header .group:first-child{border-right:1px solid #ddd}.hotQuestiones .service-header .group .icon{font-size:23px}.hotQuestiones .service-header .group .text{margin-top:10px}.hotQuestiones .service-list{background-color:#fff}.hotQuestiones .service-list .title{padding:25px 0 8px 15px;line-height:21px;font-size:17px;font-weight:600;position:relative}.hotQuestiones .service-list .title:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-list .question{list-style:none;position:relative}.hotQuestiones .service-list .question:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-list .question a{display:block;position:relative;padding:14px 15px;line-height:15px;font-size:13px;color:#333}.hotQuestiones .service-list .question a .icon{position:absolute;right:15px;color:#999}.detail{background-color:#fff;position:absolute;width:100%}.detail.detail-slide-enter,.detail.detail-slide-leave-active{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.detail.detail-slide-enter-active,.detail.detail-slide-leave-active{transition:all .3s}.detail .markdown{padding:0 14px 15px;font-size:13px;color:#666}.detail .markdown h3{margin:25px 0 8px;line-height:18px;font-size:15px;font-weight:600}.detail .markdown ul{list-style:disc;margin-left:2em}.detail .markdown ul li{display:list-item;list-style:disc;line-height:16px}.detail .markdown p{margin:9px 0;line-height:18px}\", \"\", {\"version\":3,\"sources\":[\"D:/Cixiu/Vue项目/vue-elem/src/components/service/service.vue\"],\"names\":[],\"mappings\":\"AACA,UAEE,eAAiB,CAClB,AACD,eACE,kBAAmB,AACnB,UAAY,CACb,AACD,yFAEE,wCAA2C,AACnC,+BAAmC,CAC5C,AACD,gGAEE,kBAAqB,CACtB,AACD,+BACE,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,yBAA0B,AACtB,sBAAuB,AACnB,mBAAoB,AAC5B,kBAAmB,AACnB,sBAAuB,AACvB,iBAAmB,CACpB,AACD,qCACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,sCACE,cAAe,AACf,mBAAoB,AAChB,WAAY,AACR,OAAQ,AAChB,oBAAqB,AACrB,iBAAkB,AAClB,eAAgB,AAChB,UAAY,CACb,AACD,kDACE,2BAA6B,CAC9B,AACD,4CACE,cAAgB,CACjB,AACD,4CACE,eAAiB,CAClB,AACD,6BACE,qBAAuB,CACxB,AACD,oCACE,wBAAyB,AACzB,iBAAkB,AAClB,eAAgB,AAChB,gBAAiB,AACjB,iBAAmB,CACpB,AACD,0CACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,uCACE,gBAAiB,AACjB,iBAAmB,CACpB,AACD,6CACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,yCACE,cAAe,AACf,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,eAAgB,AAChB,UAAY,CACb,AACD,+CACE,kBAAmB,AACnB,WAAY,AACZ,UAAY,CACb,AACD,QACE,sBAAuB,AACvB,kBAAmB,AACnB,UAAY,CACb,AACD,6DAEE,wCAA2C,AACnC,+BAAmC,CAC5C,AACD,oEAEE,kBAAqB,CACtB,AACD,kBACE,oBAAqB,AACrB,eAAgB,AAChB,UAAY,CACb,AACD,qBACE,kBAAmB,AACnB,iBAAkB,AAClB,eAAgB,AAChB,eAAiB,CAClB,AACD,qBACE,gBAAiB,AACjB,eAAiB,CAClB,AACD,wBACE,kBAAmB,AACnB,gBAAiB,AACjB,gBAAkB,CACnB,AACD,oBACE,aAAc,AACd,gBAAkB,CACnB\",\"file\":\"service.vue\",\"sourcesContent\":[\"\\nbody,\\nhtml {\\n  background: #fff;\\n}\\n.hotQuestiones {\\n  position: absolute;\\n  width: 100%;\\n}\\n.hotQuestiones.hotQuestiones-slide-enter,\\n.hotQuestiones.hotQuestiones-slide-leave-active {\\n  -webkit-transform: translate3d(-20%, 0, 0);\\n          transform: translate3d(-20%, 0, 0);\\n}\\n.hotQuestiones.hotQuestiones-slide-enter-active,\\n.hotQuestiones.hotQuestiones-slide-leave-active {\\n  transition: all 0.3s;\\n}\\n.hotQuestiones .service-header {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  text-align: center;\\n  background-color: #fff;\\n  position: relative;\\n}\\n.hotQuestiones .service-header:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-header .group {\\n  display: block;\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  padding: 19px 0 16px;\\n  line-height: 14px;\\n  font-size: 12px;\\n  color: #666;\\n}\\n.hotQuestiones .service-header .group:first-child {\\n  border-right: 1px solid #ddd;\\n}\\n.hotQuestiones .service-header .group .icon {\\n  font-size: 23px;\\n}\\n.hotQuestiones .service-header .group .text {\\n  margin-top: 10px;\\n}\\n.hotQuestiones .service-list {\\n  background-color: #fff;\\n}\\n.hotQuestiones .service-list .title {\\n  padding: 25px 0 8px 15px;\\n  line-height: 21px;\\n  font-size: 17px;\\n  font-weight: 600;\\n  position: relative;\\n}\\n.hotQuestiones .service-list .title:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-list .question {\\n  list-style: none;\\n  position: relative;\\n}\\n.hotQuestiones .service-list .question:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-list .question a {\\n  display: block;\\n  position: relative;\\n  padding: 14px 15px;\\n  line-height: 15px;\\n  font-size: 13px;\\n  color: #333;\\n}\\n.hotQuestiones .service-list .question a .icon {\\n  position: absolute;\\n  right: 15px;\\n  color: #999;\\n}\\n.detail {\\n  background-color: #fff;\\n  position: absolute;\\n  width: 100%;\\n}\\n.detail.detail-slide-enter,\\n.detail.detail-slide-leave-active {\\n  -webkit-transform: translate3d(100%, 0, 0);\\n          transform: translate3d(100%, 0, 0);\\n}\\n.detail.detail-slide-enter-active,\\n.detail.detail-slide-leave-active {\\n  transition: all 0.3s;\\n}\\n.detail .markdown {\\n  padding: 0 14px 15px;\\n  font-size: 13px;\\n  color: #666;\\n}\\n.detail .markdown h3 {\\n  margin: 25px 0 8px;\\n  line-height: 18px;\\n  font-size: 15px;\\n  font-weight: 600;\\n}\\n.detail .markdown ul {\\n  list-style: disc;\\n  margin-left: 2em;\\n}\\n.detail .markdown ul li {\\n  display: list-item;\\n  list-style: disc;\\n  line-height: 16px;\\n}\\n.detail .markdown p {\\n  margin: 9px 0;\\n  line-height: 18px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 610:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(590);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(436)(\"2679febc\", content, true);\n\n/***/ }),\n\n/***/ 615:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown 02-06-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    literalMidWordAsterisks: {\n      defaultValue: false,\n      describe: 'Parse midword asterisks as literal asterisks',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    },\n    openLinksInNewWindow: {\n      defaultValue: false,\n      description: 'Open all links in new windows',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  showdown.resetOptions();\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Returns the index within the passed String object of the first occurrence of the specified regex,\n * starting the search at fromIndex. Returns -1 if the value is not found.\n *\n * @param {string} str string to search\n * @param {RegExp} regex Regular expression to search\n * @param {int} [fromIndex = 0] Index to start the search\n * @returns {Number}\n * @throws InvalidArgumentError\n */\nshowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  if (regex instanceof RegExp === false) {\n    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\n  }\n  var indexOf = str.substring(fromIndex || 0).search(regex);\n  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\n};\n\n/**\n * Splits the passed string object at the defined index, and returns an array composed of the two substrings\n * @param {string} str string to split\n * @param {int} index index to split string at\n * @returns {[string,string]}\n * @throws InvalidArgumentError\n */\nshowdown.helper.splitAtIndex = function (str, index) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  return [str.substring(0, index), str.substring(index)];\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskAndDash: /([*_])/g\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\n    if (showdown.helper.isUndefined(title)) {\n      title = '';\n    }\n    linkId = linkId.toLowerCase();\n\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n    } else if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (options.openLinksInNewWindow) {\n      // escaped _\n      result += ' target=\"¨E95Eblank\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // normal cases\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username);\n      return st + '<a href=\"' + lnk + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\n// url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\n\nvar simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n    simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]]?)(?=\\s|$)(?![\"<>])/gi,\n    //simpleURLRegex3 = /\\b(((https?|ftp):\\/\\/|www\\.)[a-z\\d.-]+\\.[a-z\\d_.~:/?#\\[\\]@!$&'()*+,;=-]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n    delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>/gi,\n    simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n    delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n\n    replaceLink = function (options) {\n      'use strict';\n\n      return function (wm, link, m2, m3, trailingPunctuation) {\n        var lnkTxt = link,\n            append = '',\n            target = '';\n        if (/^www\\./i.test(link)) {\n          link = link.replace(/^www\\./i, 'http://www.');\n        }\n        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n          append = trailingPunctuation;\n        }\n        if (options.openLinksInNewWindow) {\n          target = ' target=\"¨E95Eblank\"';\n        }\n        return '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append;\n      };\n    },\n\n    replaceMail = function (options, globals) {\n      'use strict';\n      return function (wholeMatch, b, mail) {\n        var href = 'mailto:';\n        b = b || '';\n        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n        if (options.encodeEmails) {\n          href = showdown.helper.encodeEmailAddress(href + mail);\n          mail = showdown.helper.encodeEmailAddress(mail);\n        } else {\n          href = href + mail;\n        }\n        return b + '<a href=\"' + href + '\">' + mail + '</a>';\n      };\n    };\n\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  text = text.replace(delimUrlRegex, replaceLink(options));\n  text = text.replace(delimMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\nshowdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\n  'use strict';\n\n  if (!options.simplifiedAutoLink) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\n\n  if (options.excludeTrailingPunctuationFromURLs) {\n    text = text.replace(simpleURLRegex2, replaceLink(options));\n  } else {\n    text = text.replace(simpleURLRegex, replaceLink(options));\n  }\n  text = text.replace(simpleMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '¨0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n\n    var opTagPos,\n        rgx1     = new RegExp('^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', 'im'),\n        patLeft  = '<' + blockTags[i] + '\\\\b[^>]*>',\n        patRight = '</' + blockTags[i] + '>';\n    // 1. Look for the first position of the first opening HTML tag in the text\n    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\n      //2. Split the text in that position\n      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\n      //3. Match recursively\n          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');\n\n      // prevent an infinite loop\n      if (newSubText1 === subTexts[1]) {\n        break;\n      }\n      text = subTexts[0].concat(newSubText1);\n    }\n  }\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var hText = m2;\n    if (options.customizedHeaderId) {\n      hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\n    }\n\n    var span = showdown.subParser('spanGamut')(hText, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title;\n\n    // It is separate from other options to allow combining prefix and customized\n    if (options.customizedHeaderId) {\n      var match = m.match(/\\{([^{]+?)}\\s*$/);\n      if (match && match[1]) {\n        m = match[1];\n      }\n    }\n\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      title = options.prefixHeaderId + m;\n    } else if (options.prefixHeaderId === true) {\n      title = 'section ' + m;\n    } else {\n      title = m;\n    }\n\n    if (ghHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      crazyRegExp       = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\n      referenceRegExp   = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g,\n      refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n\n    } else if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(crazyRegExp, writeImageTag);\n\n  // normal cases\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  // handle reference-style shortcuts: |[img text]\n  text = text.replace(refShortcutRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  function parseInside (txt, left, right) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return left + txt + right;\n  }\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*)___\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*)__\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong>', '</strong>');\n    });\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\n      return parseInside (txt, '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n  // Now parse asterisks\n  if (options.literalMidWordAsterisks) {\n    text = text.trim().replace(/(?:^| +)\\*{3}(\\S[\\s\\S]*?)\\*{3}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <strong><em>', '</em></strong> ');\n    });\n    text = text.trim().replace(/(?:^| +)\\*{2}(\\S[\\s\\S]*?)\\*{2}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <strong>', '</strong> ');\n    });\n    text = text.trim().replace(/(?:^| +)\\*{1}(\\S[\\s\\S]*?)\\*{1}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <em>', '</em>' + (wm.slice(-1) === ' ' ? ' ' : ''));\n    });\n  } else {\n    text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n      // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '¨B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/¨B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after anchors, because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  function parseInside (txt) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return '<del>' + txt + '</del>';\n  }\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  // find escaped pipe characters\n  text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback);\n\n  // parse tables\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return showdown;\n  }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n/***/ }),\n\n/***/ 638:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"service\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"hotQuestiones-slide\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.showFlag),\n      expression: \"!showFlag\"\n    }],\n    staticClass: \"hotQuestiones\"\n  }, [_c('div', {\n    staticClass: \"header\"\n  }, [_c('m-title', {\n    attrs: {\n      \"title-name\": _vm.targetName,\n      \"no-router\": true\n    },\n    on: {\n      \"goback\": _vm.goback\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"service-header border-1px\"\n  }, [_c('a', {\n    staticClass: \"group\"\n  }, [_c('i', {\n    staticClass: \"icon icon-dialog\"\n  }), _vm._v(\" \"), _c('p', {\n    staticClass: \"text\"\n  }, [_vm._v(\"在线客服\")])]), _vm._v(\" \"), _c('a', {\n    staticClass: \"group\"\n  }, [_c('i', {\n    staticClass: \"icon icon-phone-old\"\n  }), _vm._v(\" \"), _c('p', {\n    staticClass: \"text\"\n  }, [_vm._v(\"客服热线\")])])]), _vm._v(\" \"), _c('dl', {\n    staticClass: \"service-list\"\n  }, [_c('dt', {\n    staticClass: \"title border-1px\"\n  }, [_vm._v(\"热门问题\")]), _vm._v(\" \"), _vm._l((_vm.hotQuestiones), function(question) {\n    return _c('dd', {\n      staticClass: \"question border-1px\",\n      on: {\n        \"click\": function($event) {\n          _vm.showDetial(question)\n        }\n      }\n    }, [_c('a', {\n      attrs: {\n        \"href\": question.tag\n      }\n    }, [_vm._v(\"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(question.question) + \"\\n\\t\\t\\t\\t\\t\\t\"), _c('i', {\n      staticClass: \"icon icon-keyboard_arrow_right\"\n    })])])\n  })], 2)])]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"detail-slide\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.showFlag),\n      expression: \"showFlag\"\n    }],\n    staticClass: \"detail\"\n  }, [_c('div', {\n    staticClass: \"header\"\n  }, [_c('m-title', {\n    attrs: {\n      \"title-name\": _vm.questionName,\n      \"no-router\": true\n    },\n    on: {\n      \"goback\": _vm.goback\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"markdown\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.questionDetail)\n    }\n  })])])], 1)\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.3780157bb9e7a7077fb7.js","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/._extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a8c959f0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=styles&index=0!./service.vue\")\n}\nvar Component = require(\"!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=script&index=0!./service.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-a8c959f0\\\"}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=template&index=0!./service.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  null,\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/service/service.vue\n// module id = 446\n// module chunks = 7","<template>\r\n\t<div class=\"title\">\r\n\t\t<i @click=\"back\" class=\"icon-arrow_back\"></i>\r\n\t\t<h1 class=\"name\">{{ titleName }}</h1>\r\n\t</div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\n\texport default {\r\n\t\tprops: {\r\n\t\t\ttitleName: {\r\n\t\t\t\ttype: String,\r\n\t\t\t\tdefault: ''\r\n\t\t\t},\r\n\t\t\tnoRouter: {\r\n\t\t\t\ttype: Boolean,\r\n\t\t\t\tdefault: false\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tback () {\r\n\t\t\t\tif (this.noRouter) {\r\n\t\t\t\t\tthis.$emit('goback');\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tthis.$router.back();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\r\n\t.title\r\n\t\twidth: 100%\r\n\t\theight: 44px\r\n\t\tz-index: 999\r\n\t\ttext-align: center\r\n\t\tbackground-image: linear-gradient(90deg, #0af, #0085ff)\r\n\t\tcolor: #fff\r\n\t\t.icon-arrow_back\r\n\t\t\tposition: absolute\r\n\t\t\ttop: 4px\r\n\t\t\tleft: 0\r\n\t\t\tpadding: 10px\r\n\t\t\tfont-size: 16px\r\n\t\t.name\r\n\t\t\twidth: 100%\r\n\t\t\tline-height: 44px\r\n\t\t\tfont-size: 18px\r\n\t\t\tfont-weight: 700\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// m-title.vue?67d1dc56","exports = module.exports = require(\"../../../node_modules/._css-loader@0.28.4@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \".title[data-v-e1fb876e]{width:100%;height:44px;z-index:999;text-align:center;background-image:linear-gradient(90deg,#0af,#0085ff);color:#fff}.title .icon-arrow_back[data-v-e1fb876e]{position:absolute;top:4px;left:0;padding:10px;font-size:16px}.title .name[data-v-e1fb876e]{width:100%;line-height:44px;font-size:18px;font-weight:700}\", \"\", {\"version\":3,\"sources\":[\"D:/Cixiu/Vue项目/vue-elem/src/base/m-title/m-title.vue\"],\"names\":[],\"mappings\":\"AACA,wBACE,WAAY,AACZ,YAAa,AACb,YAAa,AACb,kBAAmB,AACnB,qDAAwD,AACxD,UAAY,CACb,AACD,yCACE,kBAAmB,AACnB,QAAS,AACT,OAAQ,AACR,aAAc,AACd,cAAgB,CACjB,AACD,8BACE,WAAY,AACZ,iBAAkB,AAClB,eAAgB,AAChB,eAAiB,CAClB\",\"file\":\"m-title.vue\",\"sourcesContent\":[\"\\n.title[data-v-e1fb876e] {\\n  width: 100%;\\n  height: 44px;\\n  z-index: 999;\\n  text-align: center;\\n  background-image: linear-gradient(90deg, #0af, #0085ff);\\n  color: #fff;\\n}\\n.title .icon-arrow_back[data-v-e1fb876e] {\\n  position: absolute;\\n  top: 4px;\\n  left: 0;\\n  padding: 10px;\\n  font-size: 16px;\\n}\\n.title .name[data-v-e1fb876e] {\\n  width: 100%;\\n  line-height: 44px;\\n  font-size: 18px;\\n  font-weight: 700;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-e1fb876e\",\"scoped\":true,\"hasInlineConfig\":false}!./~/._stylus-loader@3.0.1@stylus-loader?{\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./src/base/m-title/m-title.vue\n// module id = 450\n// module chunks = 2 4 5 6 7 8 9 10","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/._css-loader@0.28.4@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-e1fb876e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!../../../node_modules/._stylus-loader@3.0.1@stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./m-title.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/._vue-style-loader@3.0.1@vue-style-loader/lib/addStylesClient.js\")(\"55b25fb2\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/._vue-style-loader@3.0.1@vue-style-loader!./~/._css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-e1fb876e\",\"scoped\":true,\"hasInlineConfig\":false}!./~/._stylus-loader@3.0.1@stylus-loader?{\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./src/base/m-title/m-title.vue\n// module id = 451\n// module chunks = 2 4 5 6 7 8 9 10","function injectStyle (ssrContext) {\n  require(\"!!../../../node_modules/._extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-e1fb876e\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=styles&index=0!./m-title.vue\")\n}\nvar Component = require(\"!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=script&index=0!./m-title.vue\"),\n  /* template */\n  require(\"!!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-e1fb876e\\\"}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector?type=template&index=0!./m-title.vue\"),\n  /* styles */\n  injectStyle,\n  /* scopeId */\n  \"data-v-e1fb876e\",\n  /* moduleIdentifier (server only) */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/base/m-title/m-title.vue\n// module id = 452\n// module chunks = 2 4 5 6 7 8 9 10","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"title\"\n  }, [_c('i', {\n    staticClass: \"icon-arrow_back\",\n    on: {\n      \"click\": _vm.back\n    }\n  }), _vm._v(\" \"), _c('h1', {\n    staticClass: \"name\"\n  }, [_vm._v(_vm._s(_vm.titleName))])])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._vue-loader@12.2.1@vue-loader/lib/template-compiler?{\"id\":\"data-v-e1fb876e\"}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=template&index=0!./src/base/m-title/m-title.vue\n// module id = 453\n// module chunks = 2 4 5 6 7 8 9 10","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._babel-runtime@6.23.0@babel-runtime/core-js/object/keys.js\n// module id = 509\n// module chunks = 0 7","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._core-js@2.4.1@core-js/library/fn/object/keys.js\n// module id = 522\n// module chunks = 0 7","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export')\n  , core    = require('./_core')\n  , fails   = require('./_fails');\nmodule.exports = function(KEY, exec){\n  var fn  = (core.Object || {})[KEY] || Object[KEY]\n    , exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._core-js@2.4.1@core-js/library/modules/_object-sap.js\n// module id = 523\n// module chunks = 0 7","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object')\n  , $keys    = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function(){\n  return function keys(it){\n    return $keys(toObject(it));\n  };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._core-js@2.4.1@core-js/library/modules/es6.object.keys.js\n// module id = 524\n// module chunks = 0 7","import axios from 'axios';\r\n\r\nexport function getQuestion () {\r\n\tconst url = `https://crayfish.elemecdn.com/m.ele.me@json/profile/explain`;\r\n\r\n\treturn axios.get(url).then((res) => {\r\n\t\treturn Promise.resolve(res.data);\r\n\t});\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/api/service.js","<template>\r\n\t<div class=\"service\">\r\n\t\t<transition name=\"hotQuestiones-slide\">\r\n\t\t\t<div class=\"hotQuestiones\" v-show=\"!showFlag\">\r\n\t\t\t\t<div class=\"header\">\r\n\t\t\t\t\t<m-title :title-name=\"targetName\" :no-router=\"true\" @goback=\"goback\"></m-title>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"service-header border-1px\">\r\n\t\t\t\t\t<a class=\"group\">\r\n\t\t\t\t\t\t<i class=\"icon icon-dialog\"></i>\r\n\t\t\t\t\t\t<p class=\"text\">在线客服</p>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t\t<a class=\"group\">\r\n\t\t\t\t\t\t<i class=\"icon icon-phone-old\"></i>\r\n\t\t\t\t\t\t<p class=\"text\">客服热线</p>\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<dl class=\"service-list\">\r\n\t\t\t\t\t<dt class=\"title border-1px\">热门问题</dt>\r\n\t\t\t\t\t<dd class=\"question border-1px\" v-for=\"question in hotQuestiones\" @click=\"showDetial(question)\">\r\n\t\t\t\t\t\t<a :href=\"question.tag\">\r\n\t\t\t\t\t\t\t{{ question.question }}\r\n\t\t\t\t\t\t\t<i class=\"icon icon-keyboard_arrow_right\"></i>\r\n\t\t\t\t\t\t</a>\r\n\t\t\t\t\t</dd>\r\n\t\t\t\t</dl>\r\n\t\t\t</div>\r\n\t\t\t</transition>\r\n\t\t\t<transition name=\"detail-slide\">\r\n\t\t\t<div class=\"detail\" v-show=\"showFlag\">\r\n\t\t\t\t<div class=\"header\">\r\n\t\t\t\t\t<m-title :title-name=\"questionName\" :no-router=\"true\" @goback=\"goback\"></m-title>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"markdown\" v-html=\"questionDetail\"></div>\r\n\t\t\t</div>\r\n\t\t</transition>\r\n\t</div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\n\timport MTitle from 'base/m-title/m-title';\r\n\timport {getQuestion} from 'api/service';\r\n\timport Showdown from 'showdown';\r\n\r\n\texport default {\r\n\t\tdata () {\r\n\t\t\treturn {\r\n\t\t\t\ttargetName: '服务中心',\r\n\t\t\t\tquestionName: '',\r\n\t\t\t\thotQuestiones: [],\r\n\t\t\t\tshowFlag: false,\r\n\t\t\t\tquestionDetail: null\r\n\t\t\t};\r\n\t\t},\r\n\t\tcreated () {\r\n\t\t\tthis._getQuestion();\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\t_getQuestion () {\r\n\t\t\t\tgetQuestion().then((response) => {\r\n\t\t\t\t\tthis.hotQuestiones = this.normalize(response);\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\tnormalize (obj) {\r\n\t\t\t\tlet ret = [];\r\n\t\t\t\tlet list = Object.keys(obj);\r\n\t\t\t\tlist.forEach((caption, index) => {\r\n\t\t\t\t\tif (caption.indexOf('Caption') !== -1) {\r\n\t\t\t\t\t\tif (obj[caption].indexOf('问题') !== -1) {\r\n\t\t\t\t\t\t\tret.push({\r\n\t\t\t\t\t\t\t\ttag: `#/service/#${caption.substring(0, caption.indexOf('Caption'))}`,\r\n\t\t\t\t\t\t\t\tquestion: obj[caption],\r\n\t\t\t\t\t\t\t\tdetail: obj[list[index + 1]]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn ret;\r\n\t\t\t},\r\n\t\t\tshowDetial (item) {\r\n\t\t\t\tthis.showFlag = true;\r\n\t\t\t\tthis.questionName = item.question;\r\n\t\t\t\tlet converter = new Showdown.Converter();\r\n\t\t\t\tthis.questionDetail = converter.makeHtml(item.detail);\r\n\t\t\t},\r\n\t\t\tgoback () {\r\n\t\t\t\tif (this.showFlag) {\r\n\t\t\t\t\tthis.showFlag = false;\r\n\t\t\t\t\tthis.$router.push('/service');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.$router.push('/profile');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\tcomponents: {\r\n\t\t\tMTitle\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\r\n\t@import '../../common/stylus/mixin.styl'\r\n\t\r\n\tbody, html\r\n\t\tbackground: #fff\r\n\t.hotQuestiones\r\n\t\tposition: absolute\r\n\t\twidth: 100%\r\n\t\t&.hotQuestiones-slide-enter, &.hotQuestiones-slide-leave-active\r\n\t\t\ttransform: translate3d(-20%, 0, 0)\r\n\t\t&.hotQuestiones-slide-enter-active, &.hotQuestiones-slide-leave-active\r\n\t\t\ttransition: all .3s\r\n\t\t.service-header\r\n\t\t\tdisplay: flex\r\n\t\t\talign-items: center\r\n\t\t\ttext-align: center\r\n\t\t\tbackground-color: #fff\r\n\t\t\tborder-1px(#ddd)\r\n\t\t\t.group\r\n\t\t\t\tdisplay: block\r\n\t\t\t\tflex: 1\r\n\t\t\t\tpadding: 19px 0 16px\r\n\t\t\t\tline-height: 14px\r\n\t\t\t\tfont-size: 12px\r\n\t\t\t\tcolor: #666\r\n\t\t\t\t&:first-child\r\n\t\t\t\t\tborder-right: 1px solid #ddd\r\n\t\t\t\t.icon\r\n\t\t\t\t\tfont-size: 23px\r\n\t\t\t\t.text\r\n\t\t\t\t\tmargin-top: 10px\r\n\t\t.service-list\r\n\t\t\tbackground-color: #fff\r\n\t\t\t.title\r\n\t\t\t\tpadding: 25px 0 8px 15px\r\n\t\t\t\tline-height: 21px\r\n\t\t\t\tfont-size: 17px\r\n\t\t\t\tfont-weight: 600\r\n\t\t\t\tborder-1px(#ddd)\r\n\t\t\t.question\r\n\t\t\t\tlist-style: none\r\n\t\t\t\tborder-1px(#ddd)\r\n\t\t\t\ta\r\n\t\t\t\t\tdisplay: block\r\n\t\t\t\t\tposition: relative\r\n\t\t\t\t\tpadding: 14px 15px\r\n\t\t\t\t\tline-height: 15px\r\n\t\t\t\t\tfont-size: 13px\r\n\t\t\t\t\tcolor: #333\r\n\t\t\t\t\t.icon\r\n\t\t\t\t\t\tposition: absolute\r\n\t\t\t\t\t\tright: 15px\r\n\t\t\t\t\t\tcolor: #999\r\n\t.detail\r\n\t\tbackground-color: #fff\r\n\t\tposition: absolute\r\n\t\twidth: 100%\r\n\t\t&.detail-slide-enter, &.detail-slide-leave-active\r\n\t\t\ttransform: translate3d(100%, 0, 0)\r\n\t\t&.detail-slide-enter-active, &.detail-slide-leave-active\r\n\t\t\ttransition: all .3s\r\n\t\t.markdown\r\n\t\t\tpadding: 0 14px 15px\r\n\t\t\tfont-size: 13px\r\n\t\t\tcolor: #666\r\n\t\t\th3\r\n\t\t\t\tmargin: 25px 0 8px\r\n\t\t\t\tline-height: 18px\r\n\t\t\t\tfont-size: 15px\r\n\t\t\t\tfont-weight: 600\r\n\t\t\tul\r\n\t\t\t\tlist-style: disc\r\n\t\t\t\tmargin-left: 2em\r\n\t\t\t\tli\r\n\t\t\t\t\tdisplay: list-item\r\n\t\t\t\t\tlist-style: disc\r\n\t\t\t\t\tline-height: 16px\r\n\t\t\tp\r\n\t\t\t\tmargin: 9px 0\r\n\t\t\t\tline-height: 18px\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// service.vue?f8f1156e","exports = module.exports = require(\"../../../node_modules/._css-loader@0.28.4@css-loader/lib/css-base.js\")(true);\n// imports\n\n\n// module\nexports.push([module.id, \"body,html{background:#fff}.hotQuestiones{position:absolute;width:100%}.hotQuestiones.hotQuestiones-slide-enter,.hotQuestiones.hotQuestiones-slide-leave-active{-webkit-transform:translate3d(-20%,0,0);transform:translate3d(-20%,0,0)}.hotQuestiones.hotQuestiones-slide-enter-active,.hotQuestiones.hotQuestiones-slide-leave-active{transition:all .3s}.hotQuestiones .service-header{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-align:center;-ms-flex-align:center;align-items:center;text-align:center;background-color:#fff;position:relative}.hotQuestiones .service-header:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-header .group{display:block;-webkit-box-flex:1;-ms-flex:1;flex:1;padding:19px 0 16px;line-height:14px;font-size:12px;color:#666}.hotQuestiones .service-header .group:first-child{border-right:1px solid #ddd}.hotQuestiones .service-header .group .icon{font-size:23px}.hotQuestiones .service-header .group .text{margin-top:10px}.hotQuestiones .service-list{background-color:#fff}.hotQuestiones .service-list .title{padding:25px 0 8px 15px;line-height:21px;font-size:17px;font-weight:600;position:relative}.hotQuestiones .service-list .title:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-list .question{list-style:none;position:relative}.hotQuestiones .service-list .question:after{display:block;position:absolute;left:0;bottom:0;width:100%;border-top:1px solid #ddd;content:\\\" \\\"}.hotQuestiones .service-list .question a{display:block;position:relative;padding:14px 15px;line-height:15px;font-size:13px;color:#333}.hotQuestiones .service-list .question a .icon{position:absolute;right:15px;color:#999}.detail{background-color:#fff;position:absolute;width:100%}.detail.detail-slide-enter,.detail.detail-slide-leave-active{-webkit-transform:translate3d(100%,0,0);transform:translate3d(100%,0,0)}.detail.detail-slide-enter-active,.detail.detail-slide-leave-active{transition:all .3s}.detail .markdown{padding:0 14px 15px;font-size:13px;color:#666}.detail .markdown h3{margin:25px 0 8px;line-height:18px;font-size:15px;font-weight:600}.detail .markdown ul{list-style:disc;margin-left:2em}.detail .markdown ul li{display:list-item;list-style:disc;line-height:16px}.detail .markdown p{margin:9px 0;line-height:18px}\", \"\", {\"version\":3,\"sources\":[\"D:/Cixiu/Vue项目/vue-elem/src/components/service/service.vue\"],\"names\":[],\"mappings\":\"AACA,UAEE,eAAiB,CAClB,AACD,eACE,kBAAmB,AACnB,UAAY,CACb,AACD,yFAEE,wCAA2C,AACnC,+BAAmC,CAC5C,AACD,gGAEE,kBAAqB,CACtB,AACD,+BACE,oBAAqB,AACrB,oBAAqB,AACrB,aAAc,AACd,yBAA0B,AACtB,sBAAuB,AACnB,mBAAoB,AAC5B,kBAAmB,AACnB,sBAAuB,AACvB,iBAAmB,CACpB,AACD,qCACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,sCACE,cAAe,AACf,mBAAoB,AAChB,WAAY,AACR,OAAQ,AAChB,oBAAqB,AACrB,iBAAkB,AAClB,eAAgB,AAChB,UAAY,CACb,AACD,kDACE,2BAA6B,CAC9B,AACD,4CACE,cAAgB,CACjB,AACD,4CACE,eAAiB,CAClB,AACD,6BACE,qBAAuB,CACxB,AACD,oCACE,wBAAyB,AACzB,iBAAkB,AAClB,eAAgB,AAChB,gBAAiB,AACjB,iBAAmB,CACpB,AACD,0CACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,uCACE,gBAAiB,AACjB,iBAAmB,CACpB,AACD,6CACE,cAAe,AACf,kBAAmB,AACnB,OAAQ,AACR,SAAU,AACV,WAAY,AACZ,0BAA2B,AAC3B,WAAa,CACd,AACD,yCACE,cAAe,AACf,kBAAmB,AACnB,kBAAmB,AACnB,iBAAkB,AAClB,eAAgB,AAChB,UAAY,CACb,AACD,+CACE,kBAAmB,AACnB,WAAY,AACZ,UAAY,CACb,AACD,QACE,sBAAuB,AACvB,kBAAmB,AACnB,UAAY,CACb,AACD,6DAEE,wCAA2C,AACnC,+BAAmC,CAC5C,AACD,oEAEE,kBAAqB,CACtB,AACD,kBACE,oBAAqB,AACrB,eAAgB,AAChB,UAAY,CACb,AACD,qBACE,kBAAmB,AACnB,iBAAkB,AAClB,eAAgB,AAChB,eAAiB,CAClB,AACD,qBACE,gBAAiB,AACjB,eAAiB,CAClB,AACD,wBACE,kBAAmB,AACnB,gBAAiB,AACjB,gBAAkB,CACnB,AACD,oBACE,aAAc,AACd,gBAAkB,CACnB\",\"file\":\"service.vue\",\"sourcesContent\":[\"\\nbody,\\nhtml {\\n  background: #fff;\\n}\\n.hotQuestiones {\\n  position: absolute;\\n  width: 100%;\\n}\\n.hotQuestiones.hotQuestiones-slide-enter,\\n.hotQuestiones.hotQuestiones-slide-leave-active {\\n  -webkit-transform: translate3d(-20%, 0, 0);\\n          transform: translate3d(-20%, 0, 0);\\n}\\n.hotQuestiones.hotQuestiones-slide-enter-active,\\n.hotQuestiones.hotQuestiones-slide-leave-active {\\n  transition: all 0.3s;\\n}\\n.hotQuestiones .service-header {\\n  display: -webkit-box;\\n  display: -ms-flexbox;\\n  display: flex;\\n  -webkit-box-align: center;\\n      -ms-flex-align: center;\\n          align-items: center;\\n  text-align: center;\\n  background-color: #fff;\\n  position: relative;\\n}\\n.hotQuestiones .service-header:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-header .group {\\n  display: block;\\n  -webkit-box-flex: 1;\\n      -ms-flex: 1;\\n          flex: 1;\\n  padding: 19px 0 16px;\\n  line-height: 14px;\\n  font-size: 12px;\\n  color: #666;\\n}\\n.hotQuestiones .service-header .group:first-child {\\n  border-right: 1px solid #ddd;\\n}\\n.hotQuestiones .service-header .group .icon {\\n  font-size: 23px;\\n}\\n.hotQuestiones .service-header .group .text {\\n  margin-top: 10px;\\n}\\n.hotQuestiones .service-list {\\n  background-color: #fff;\\n}\\n.hotQuestiones .service-list .title {\\n  padding: 25px 0 8px 15px;\\n  line-height: 21px;\\n  font-size: 17px;\\n  font-weight: 600;\\n  position: relative;\\n}\\n.hotQuestiones .service-list .title:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-list .question {\\n  list-style: none;\\n  position: relative;\\n}\\n.hotQuestiones .service-list .question:after {\\n  display: block;\\n  position: absolute;\\n  left: 0;\\n  bottom: 0;\\n  width: 100%;\\n  border-top: 1px solid #ddd;\\n  content: \\\" \\\";\\n}\\n.hotQuestiones .service-list .question a {\\n  display: block;\\n  position: relative;\\n  padding: 14px 15px;\\n  line-height: 15px;\\n  font-size: 13px;\\n  color: #333;\\n}\\n.hotQuestiones .service-list .question a .icon {\\n  position: absolute;\\n  right: 15px;\\n  color: #999;\\n}\\n.detail {\\n  background-color: #fff;\\n  position: absolute;\\n  width: 100%;\\n}\\n.detail.detail-slide-enter,\\n.detail.detail-slide-leave-active {\\n  -webkit-transform: translate3d(100%, 0, 0);\\n          transform: translate3d(100%, 0, 0);\\n}\\n.detail.detail-slide-enter-active,\\n.detail.detail-slide-leave-active {\\n  transition: all 0.3s;\\n}\\n.detail .markdown {\\n  padding: 0 14px 15px;\\n  font-size: 13px;\\n  color: #666;\\n}\\n.detail .markdown h3 {\\n  margin: 25px 0 8px;\\n  line-height: 18px;\\n  font-size: 15px;\\n  font-weight: 600;\\n}\\n.detail .markdown ul {\\n  list-style: disc;\\n  margin-left: 2em;\\n}\\n.detail .markdown ul li {\\n  display: list-item;\\n  list-style: disc;\\n  line-height: 16px;\\n}\\n.detail .markdown p {\\n  margin: 9px 0;\\n  line-height: 18px;\\n}\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-a8c959f0\",\"scoped\":false,\"hasInlineConfig\":false}!./~/._stylus-loader@3.0.1@stylus-loader?{\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./src/components/service/service.vue\n// module id = 590\n// module chunks = 7","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/._css-loader@0.28.4@css-loader/index.js?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-a8c959f0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/._stylus-loader@3.0.1@stylus-loader/index.js?{\\\"sourceMap\\\":true}!../../../node_modules/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./service.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/._vue-style-loader@3.0.1@vue-style-loader/lib/addStylesClient.js\")(\"2679febc\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._extract-text-webpack-plugin@2.1.2@extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/._vue-style-loader@3.0.1@vue-style-loader!./~/._css-loader@0.28.4@css-loader?{\"minimize\":true,\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-a8c959f0\",\"scoped\":false,\"hasInlineConfig\":false}!./~/._stylus-loader@3.0.1@stylus-loader?{\"sourceMap\":true}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=styles&index=0!./src/components/service/service.vue\n// module id = 610\n// module chunks = 7",";/*! showdown 02-06-2017 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Specify a prefix to generated header ids',\n      type: 'string'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    literalMidWordAsterisks: {\n      defaultValue: false,\n      describe: 'Parse midword asterisks as literal asterisks',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    },\n    openLinksInNewWindow: {\n      defaultValue: false,\n      description: 'Open all links in new windows',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  showdown.resetOptions();\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return a.constructor === Array;\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Returns the index within the passed String object of the first occurrence of the specified regex,\n * starting the search at fromIndex. Returns -1 if the value is not found.\n *\n * @param {string} str string to search\n * @param {RegExp} regex Regular expression to search\n * @param {int} [fromIndex = 0] Index to start the search\n * @returns {Number}\n * @throws InvalidArgumentError\n */\nshowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  if (regex instanceof RegExp === false) {\n    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\n  }\n  var indexOf = str.substring(fromIndex || 0).search(regex);\n  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\n};\n\n/**\n * Splits the passed string object at the defined index, and returns an array composed of the two substrings\n * @param {string} str string to split\n * @param {int} index index to split string at\n * @returns {[string,string]}\n * @throws InvalidArgumentError\n */\nshowdown.helper.splitAtIndex = function (str, index) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  return [str.substring(0, index), str.substring(index)];\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof(console) === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskAndDash: /([*_])/g\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor;\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n      // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    []\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces (nbsp causes trouble in older browsers and some regex flavors)\n    text = text.replace(/\\u00A0/g, ' ');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    return text;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\n    if (showdown.helper.isUndefined(title)) {\n      title = '';\n    }\n    linkId = linkId.toLowerCase();\n\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n    } else if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (options.openLinksInNewWindow) {\n      // escaped _\n      result += ' target=\"¨E95Eblank\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // normal cases\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n                      writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d\\-]+))(?=[.!?;,[\\]()]|\\s|$)/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username);\n      return st + '<a href=\"' + lnk + '\">' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\n// url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\n\nvar simpleURLRegex  = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+)()(?=\\s|$)(?![\"<>])/gi,\n    simpleURLRegex2 = /\\b(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]]?)(?=\\s|$)(?![\"<>])/gi,\n    //simpleURLRegex3 = /\\b(((https?|ftp):\\/\\/|www\\.)[a-z\\d.-]+\\.[a-z\\d_.~:/?#\\[\\]@!$&'()*+,;=-]+?)([.!?()]?)(?=\\s|$)(?![\"<>])/gi,\n    delimUrlRegex   = /<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>/gi,\n    simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n    delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n\n    replaceLink = function (options) {\n      'use strict';\n\n      return function (wm, link, m2, m3, trailingPunctuation) {\n        var lnkTxt = link,\n            append = '',\n            target = '';\n        if (/^www\\./i.test(link)) {\n          link = link.replace(/^www\\./i, 'http://www.');\n        }\n        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n          append = trailingPunctuation;\n        }\n        if (options.openLinksInNewWindow) {\n          target = ' target=\"¨E95Eblank\"';\n        }\n        return '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append;\n      };\n    },\n\n    replaceMail = function (options, globals) {\n      'use strict';\n      return function (wholeMatch, b, mail) {\n        var href = 'mailto:';\n        b = b || '';\n        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n        if (options.encodeEmails) {\n          href = showdown.helper.encodeEmailAddress(href + mail);\n          mail = showdown.helper.encodeEmailAddress(mail);\n        } else {\n          href = href + mail;\n        }\n        return b + '<a href=\"' + href + '\">' + mail + '</a>';\n      };\n    };\n\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  text = text.replace(delimUrlRegex, replaceLink(options));\n  text = text.replace(delimMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\nshowdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\n  'use strict';\n\n  if (!options.simplifiedAutoLink) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\n\n  if (options.excludeTrailingPunctuationFromURLs) {\n    text = text.replace(simpleURLRegex2, replaceLink(options));\n  } else {\n    text = text.replace(simpleURLRegex, replaceLink(options));\n  }\n  text = text.replace(simpleMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  text = text.replace(/((^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+)/gm, function (wholeMatch, m1) {\n    var bq = m1;\n\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, '¨0'); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof(text) === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      return m1 + '<code>' + c + '</code>';\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags and comments.  See Friedl's\n  // \"Mastering Regular Expressions\", 2nd Ed., pp. 200-201.\n  var regex = /(<[a-z\\/!$](\"[^\"]*\"|'[^']*'|[^'\">])*>|<!(--.*?--\\s*)+>)/gi;\n\n  text = text.replace(regex, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)```(.*)\\n([\\s\\S]*?)\\n```/g, function (wholeMatch, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  for (var i = 0; i < blockTags.length; ++i) {\n\n    var opTagPos,\n        rgx1     = new RegExp('^ {0,3}<' + blockTags[i] + '\\\\b[^>]*>', 'im'),\n        patLeft  = '<' + blockTags[i] + '\\\\b[^>]*>',\n        patRight = '</' + blockTags[i] + '>';\n    // 1. Look for the first position of the first opening HTML tag in the text\n    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\n      //2. Split the text in that position\n      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\n      //3. Match recursively\n          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');\n\n      // prevent an infinite loop\n      if (newSubText1 === subTexts[1]) {\n        break;\n      }\n      text = subTexts[0].concat(newSubText1);\n    }\n  }\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n      ghHeaderId = options.ghCompatibleHeaderId,\n\n  // Set text-style headers:\n  //\tHeader 1\n  //\t========\n  //\n  //\tHeader 2\n  //\t--------\n  //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var hText = m2;\n    if (options.customizedHeaderId) {\n      hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\n    }\n\n    var span = showdown.subParser('spanGamut')(hText, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title;\n\n    // It is separate from other options to allow combining prefix and customized\n    if (options.customizedHeaderId) {\n      var match = m.match(/\\{([^{]+?)}\\s*$/);\n      if (match && match[1]) {\n        m = match[1];\n      }\n    }\n\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      title = options.prefixHeaderId + m;\n    } else if (options.prefixHeaderId === true) {\n      title = 'section ' + m;\n    } else {\n      title = m;\n    }\n\n    if (ghHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      crazyRegExp       = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\n      referenceRegExp   = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[(.*?)]()()()()()/g,\n      refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n\n    } else if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskAndDash, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(crazyRegExp, writeImageTag);\n\n  // normal cases\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  // handle reference-style shortcuts: |[img text]\n  text = text.replace(refShortcutRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  function parseInside (txt, left, right) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return left + txt + right;\n  }\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*)___\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*)__\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong>', '</strong>');\n    });\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\n      return parseInside (txt, '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n  // Now parse asterisks\n  if (options.literalMidWordAsterisks) {\n    text = text.trim().replace(/(?:^| +)\\*{3}(\\S[\\s\\S]*?)\\*{3}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <strong><em>', '</em></strong> ');\n    });\n    text = text.trim().replace(/(?:^| +)\\*{2}(\\S[\\s\\S]*?)\\*{2}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <strong>', '</strong> ');\n    });\n    text = text.trim().replace(/(?:^| +)\\*{1}(\\S[\\s\\S]*?)\\*{1}(?: +|$)/g, function (wm, txt) {\n      return parseInside (txt, ' <em>', '</em>' + (wm.slice(-1) === ' ' ? ' ' : ''));\n    });\n  } else {\n    text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n      // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        // replace double linebreaks with a placeholder\n        item = item.replace(/\\n\\n/g, '¨B');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n        item = item.replace(/¨B/g, '\\n\\n');\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg);\n        if (pos !== -1) {\n          // slice\n          result += '\\n<' + listType + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n<' + listType + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      result = '\\n<' + listType + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after anchors, because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    text = text.replace(/\\n/g, '<br />\\n');\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  function parseInside (txt) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return '<del>' + txt + '</del>';\n  }\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  text = text.replace(regex, function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx = /^ {0,3}\\|?.+\\|.+\\n[ \\t]{0,3}\\|?[ \\t]*:?[ \\t]*(?:-|=){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:-|=){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    if (options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  // find escaped pipe characters\n  text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback);\n\n  // parse tables\n  text = text.replace(tableRgx, function (rawTable) {\n\n    var i, tableLines = rawTable.split('\\n');\n\n    // strip wrong first and last column if wrapped tables are used\n    for (i = 0; i < tableLines.length; ++i) {\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  });\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nvar root = this;\n\n// CommonJS/nodeJS Loader\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = showdown;\n\n// AMD Loader\n} else if (typeof define === 'function' && define.amd) {\n  define(function () {\n    'use strict';\n    return showdown;\n  });\n\n// Regular Browser loader\n} else {\n  root.showdown = showdown;\n}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._showdown@1.7.1@showdown/dist/showdown.js\n// module id = 615\n// module chunks = 7","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"service\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"hotQuestiones-slide\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.showFlag),\n      expression: \"!showFlag\"\n    }],\n    staticClass: \"hotQuestiones\"\n  }, [_c('div', {\n    staticClass: \"header\"\n  }, [_c('m-title', {\n    attrs: {\n      \"title-name\": _vm.targetName,\n      \"no-router\": true\n    },\n    on: {\n      \"goback\": _vm.goback\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"service-header border-1px\"\n  }, [_c('a', {\n    staticClass: \"group\"\n  }, [_c('i', {\n    staticClass: \"icon icon-dialog\"\n  }), _vm._v(\" \"), _c('p', {\n    staticClass: \"text\"\n  }, [_vm._v(\"在线客服\")])]), _vm._v(\" \"), _c('a', {\n    staticClass: \"group\"\n  }, [_c('i', {\n    staticClass: \"icon icon-phone-old\"\n  }), _vm._v(\" \"), _c('p', {\n    staticClass: \"text\"\n  }, [_vm._v(\"客服热线\")])])]), _vm._v(\" \"), _c('dl', {\n    staticClass: \"service-list\"\n  }, [_c('dt', {\n    staticClass: \"title border-1px\"\n  }, [_vm._v(\"热门问题\")]), _vm._v(\" \"), _vm._l((_vm.hotQuestiones), function(question) {\n    return _c('dd', {\n      staticClass: \"question border-1px\",\n      on: {\n        \"click\": function($event) {\n          _vm.showDetial(question)\n        }\n      }\n    }, [_c('a', {\n      attrs: {\n        \"href\": question.tag\n      }\n    }, [_vm._v(\"\\n\\t\\t\\t\\t\\t\\t\" + _vm._s(question.question) + \"\\n\\t\\t\\t\\t\\t\\t\"), _c('i', {\n      staticClass: \"icon icon-keyboard_arrow_right\"\n    })])])\n  })], 2)])]), _vm._v(\" \"), _c('transition', {\n    attrs: {\n      \"name\": \"detail-slide\"\n    }\n  }, [_c('div', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.showFlag),\n      expression: \"showFlag\"\n    }],\n    staticClass: \"detail\"\n  }, [_c('div', {\n    staticClass: \"header\"\n  }, [_c('m-title', {\n    attrs: {\n      \"title-name\": _vm.questionName,\n      \"no-router\": true\n    },\n    on: {\n      \"goback\": _vm.goback\n    }\n  })], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"markdown\",\n    domProps: {\n      \"innerHTML\": _vm._s(_vm.questionDetail)\n    }\n  })])])], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/._vue-loader@12.2.1@vue-loader/lib/template-compiler?{\"id\":\"data-v-a8c959f0\"}!./~/._vue-loader@12.2.1@vue-loader/lib/selector.js?type=template&index=0!./src/components/service/service.vue\n// module id = 638\n// module chunks = 7"],"sourceRoot":""}